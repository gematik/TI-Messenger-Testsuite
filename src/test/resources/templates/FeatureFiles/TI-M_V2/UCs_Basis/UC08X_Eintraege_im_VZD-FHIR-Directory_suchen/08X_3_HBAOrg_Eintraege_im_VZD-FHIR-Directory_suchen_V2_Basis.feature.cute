# language: de
@File:FeatureFile_08X_03_V2_Basis @Ctl:UseCaseV2_08X_Basis
@PRODUKT:TI-M_Client_Basis
@Zul:Pro
@AFO-ID:A_25479
@AFO-ID:A_25428
@NB:JA

Funktionalit채t: 08X. (3) Eintr채ge im VZD-FHIR-Directory suchen (Basis Spec)

  Der Anwendungsfall beschreibt, wie ein Akteur im VZD-FHIR-Directory nach HealthcareService- undPractitionerRole-
  Ressourcen sucht. Dies setzt eine erfolgreiche Anmeldung des Akteurs an einem Messenger-Service voraus.

  COMMENT: Basis
  A_25479     Search Token
  A_25428     VZD-FHIR-Directory Inhalte

  Inhalt
  TF 1     HBA-User sucht Healthcareservice im VZD
  TF 2     HBA-User sucht Healthcareservice teilqualifiziert im VZD

  @Ctl:AllowAll @Ctl:OrgAdmin @Ctl:VZD
    @TCID:TIM_V2_BASIS_AF_08X0301 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08X.03.01 Eintr채ge im VZD-FHIR-Directory suchen - AllowAll - HBA-User sucht Healthcareservice im VZD
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN         | <ApiName1A> |
      | B | PRO_CLIENT        | <ApiName1B> |
      | C | PRO_PRACTITIONER  | <ApiName2> |
    Und        "B", "C" setzen den eigenen Authorization Mode auf "AllowAll"
    Und        "C" hinterlegt seine MXID im Verzeichnis Dienst
    Wenn       "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Dann       "C" findet "B" im Healthcare-Service "HealthcareServiceName1"

    @Shuffle(true) #
    #@MaxSameColumnProperty(ApiName1A,homeserver,1) #
    #@DistinctProperty(homeserver)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(!ApiName2.properties["homeserver"].equals(ApiName1A.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("proClient"))
    @Filter(ApiName2.hasTag("proClient"))
    @Filter(ApiName2.hasTag("practitioner"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName2 |

  @Ctl:AllowAll @Ctl:OrgAdmin @Ctl:VZD
    @TCID:TIM_V2_BASIS_AF_08X0302 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08X.03.02 Eintr채ge im VZD-FHIR-Directory suchen - AllowAll - HBA-User sucht Healthcareservice teilqualifiziert im VZD
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN         | <ApiName1A> |
      | B | PRO_CLIENT        | <ApiName1B> |
      | C | PRO_PRACTITIONER  | <ApiName2> |
    Und        "B", "C" setzen den eigenen Authorization Mode auf "AllowAll"
    Und        "C" hinterlegt seine MXID im Verzeichnis Dienst
    Wenn       "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Dann       "C" findet Healthcare-Service "HealthcareServiceName1" bei Suche nach Namen minus 0-1 (Anzahl vorne-hinten) Char(s) abgeschnitten

    @Shuffle(true) #
    #@MaxSameColumnProperty(ApiName1A,homeserver,1) #
    #@DistinctProperty(homeserver)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(!ApiName2.properties["homeserver"].equals(ApiName1A.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("proClient"))
    @Filter(ApiName2.hasTag("proClient"))
    @Filter(ApiName2.hasTag("practitioner"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName2 |