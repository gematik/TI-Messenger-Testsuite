# language: de
@File:FeatureFile_03_03_V2_Pro @Ctl:UseCaseV2_03_Pro
@PRODUKT:TI-M_Client_Pro @PRODUKT:TI-M_FD_Pro
@Zul:Pro
@AF-ID:AF_10376
@AFO-ID:A_26172-01

Funktionalität: 5.1.3 (3) FHIR-VZD Sichtbarkeit für Versicherte setzen (Pro Spec)

  Mit diesem Anwendungsfall kann ein Akteur in der Rolle "User-HBA" die Sichtbarkeit seiner Endpoint Einträge im
  VZD-FHIR-Directory verwalten. Möchte der Akteur verhindern, dass Akteure in der Rolle "Versicherter" seine MXID über
  die Suche finden können, dann kann er dies am Endpunkt konfigurieren oder im umgekehrten Fall wieder zurücknehmen.

  COMMENT: Pro
  AF_10376    Practitioner - FHIR-VZD Sichtbarkeit für Versicherte setzen
  A_26172-01  Schnittstelle für die VZD-FHIR-Directory Suche

  Inhalt
  TF 1      HBA User setzt seinen Status auf endpointVisibility auf hide-versicherte

  @Ctl:AllowAll @Ctl:VZD
    @TCID:TIM_V2_PRO_AF_030301 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 03.03.01 FHIR-VZD Sichtbarkeit für Versicherte setzen - AllowAll - HBA User setzt seinen Status auf endpointVisibility auf hide-versicherte
    Angenommen Es werden folgende Clients reserviert:
      | A | PRO_PRACTITIONER  | <ApiName1> |
      | B | PRO_CLIENT        | <ApiName2> |
    Und        "A", "B" setzen den eigenen Authorization Mode auf "AllowAll"
    Und        "A" hinterlegt seine MXID im Verzeichnis Dienst
    Und        "B" findet "A" in FHIR
    Wenn       "A" setzt die endpointVisibility für seine Practitioner Endpunkt Extension auf hide-versicherte
    Und        "A" sieht die eigene endpointVisibility der Practitioner Endpunkt Extension ist auf dem Wert hide-versicherte
    Und        "B" findet "A" in FHIR
    Wenn       "A" löscht die endpointVisibility hide-versicherte für seine Practitioner Endpunkt Extension
    Und        "A" sieht die eigene endpointVisibility der Practitioner Endpunkt Extension NICHT mehr auf dem Wert hide-versicherte [Retry 10 - 3]
    Und        "B" findet "A" in FHIR

    @Shuffle(true) #
    #@MaxSameColumnProperty(ApiName2,homeserver,1) #
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("proClient"))
    @Filter(ApiName2.hasTag("proClient"))
    @Filter(ApiName1.hasTag("practitioner"))

    Beispiele:
      | ApiName1 | ApiName2 |


