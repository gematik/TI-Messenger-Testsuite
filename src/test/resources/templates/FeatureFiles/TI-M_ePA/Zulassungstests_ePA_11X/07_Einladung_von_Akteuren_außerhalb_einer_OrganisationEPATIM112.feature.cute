# language: de
@File:FeatureFile_07_ePA
@PRODUKT:TIM_ePA_11X
@AF-ID:AF_10061-02

Funktionalität:  07. Einladung von Akteuren außerhalb einer Organisation

  #Muss noch angepasst werden
  AF_10061-02 - Einladung von Akteuren außerhalb einer Organisation

  In diesem Anwendungsfall erfolgt gleichzeitig eine Prüfung des Berechtigungskonzept.

  Inhalt
  TF  1 &  2 Einladung in Chat/Raum - Teilqualifizierte Suche (Versicherter an HBA) (AllowAll)
  TF  3 &  4 Einladung in Chat/Raum - Teilqualifizierte Suche (Versicherter an Org-User) (AllowAll)
  # Unten stehende TFs könnte man auch noch mit Raum machen oder mixen
  TF  5 &  6 Einladung in Chat - "Versicherter - HBA-User" und "HBA-User - Versicherter" (AllowAll)
  TF  7 &  8 Einladung in Chat - "Versicherter - Organisations-User" und "Organisations-User - Versicherter" (AllowAll)
  TF  9 & 10 Einladung in Chat - "Versicherter - HBA-User" und "HBA-User - Versicherter" (BlockAll)
  TF 11 & 12 Einladung in Chat - "Versicherter - Organisations-User" und Organisations-User" - Versicherter (BlockAll)
  # Ende Block
  TF 13 & 14 Ablehnung der Einladung in Chat/Raum ("Versicherter - HBA-User" und "HBA-User - Versicherter" (AllowAll))
  TF 15 & 16 Ablehnung der Einladung in Chat/Raum ("Versicherter - Organisations-User" und Organisations-User" - Versicherter (AllowAll))
  TF 17 & 18 Negativ-Tests zur Einladung - Dritter Nutzer soll in Chat eingeladen werden (Versicherter an HBA & OrgUser)
  TF 19      Negativ-Test Im Verzeichnisdienst nicht registrierter Nutzer wird gesucht durch Versicherten

  #TF 12 & 13 Negativ-Tests zur Einladung - Im Verzeichnisdienst nicht registrierter Nutzer wird angeschrieben (HBA & OrgUser)


  # TODO Bei mehreren Anbietern MaxSameColumnProperty & Shuffle anschalten

  @BP:P2P @Ctl:Chat @Ctl:SeachPart @Ctl:BasicTest
  @TCID:TIM_ePA_AF_0701 @PRIO:1 @TESTFALL:Positiv @STATUS:Zurückgestellt
  Szenariogrundriss: 07.01 Einladung außerhalb einer Organisation - Einladung in Chat - Teilqualifizierte Suche (Versicherter an HBA-User)
    Angenommen Es werden folgende Clients reserviert:
      | A | INSURANT     | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "B" hinterlegt "A" in seiner Freigabeliste
    Und        "A" findet TI-Messenger-Nutzer "B" bei Suche nach Namen minus 0-1 (Anzahl vorne-hinten) Char(s) abgeschnitten
    Wenn       "A" schreibt "B" direkt "Testnachricht 1"
    Dann       "B" erhält eine Einladung von "A"
    Und        "B" bestätigt eine Einladung von "A"
    Und        "B" empfängt eine Nachricht "Testnachricht 1" von "A"

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("insurant"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1 | ApiName2 |

  @BP:P2P @Ctl:Raum @Ctl:SeachPart
    @TCID:TIM_ePA_AF_0702 @PRIO:1 @TESTFALL:Positiv @STATUS:Zurückgestellt
  Szenariogrundriss: 07.02 Einladung außerhalb einer Organisation - Einladung in Raum - Teilqualifizierte Suche (Versicherter an HBA-User)
    Angenommen Es werden folgende Clients reserviert:
      | A | INSURANT     | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "B" hinterlegt "A" in seiner Freigabeliste
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet TI-Messenger-Nutzer "B" bei Suche nach Namen minus 0-1 (Anzahl vorne-hinten) Char(s) abgeschnitten
    Wenn       "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Dann       "B" erhält eine Einladung von "A"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1" von "A"
    Und        "B" ist dem Raum "TIM Testraum 1" beigetreten

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("insurant"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1 | ApiName2 |

  @BP:P2P @Ctl:Chat @Ctl:SeachPart @Ctl:OrgOnly
    @TCID:TIM_ePA_AF_0703 @PRIO:1 @TESTFALL:Positiv @STATUS:Zurückgestellt
  Szenariogrundriss: 07.03 Einladung außerhalb einer Organisation - Einladung in Chat - Teilqualifizierte Suche  (Versicherter - OrgUser)
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN | <ApiName1A> |
      | B | CLIENT    | <ApiName1B> |
      | C | INSURANT  | <ApiName2>  |
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "C" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "B" hinterlegt "C" in seiner Freigabeliste
    Und        "C" findet Healthcare-Service "HealthcareServiceName1" bei Suche nach Namen minus 0-1 (Anzahl vorne-hinten) Char(s) abgeschnitten
    Wenn       "C" schreibt "B" über den Healthcare-Service "HealthcareServiceName1" direkt "Testnachricht 1"
    Dann       "B" erhält eine Einladung von "C"
    Und        "B" bestätigt eine Einladung von "C"
    Und        "B" empfängt eine Nachricht "Testnachricht 1" von "C"

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(!ApiName1B.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName2.hasTag("insurant"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName2 |

  @BP:P2P @Ctl:Raum @Ctl:SeachPart @Ctl:OrgOnly
  @TCID:TIM_ePA_AF_0704 @PRIO:1 @TESTFALL:Positiv @STATUS:Zurückgestellt
  Szenariogrundriss: 07.04 Einladung außerhalb einer Organisation - Einladung in Raum - Teilqualifizierte Suche (Versicherter - OrgUser)
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN | <ApiName1A> |
      | B | CLIENT    | <ApiName1B> |
      | C | INSURANT  | <ApiName2>  |
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "C" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "B" hinterlegt "C" in seiner Freigabeliste
    Und        "C" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "C" findet Healthcare-Service "HealthcareServiceName1" bei Suche nach Namen minus 0-1 (Anzahl vorne-hinten) Char(s) abgeschnitten
    Wenn       "C" lädt "B" über den HealthcareService "HealthcareServiceName1" in den Chat-Raum "TIM Testraum 1" ein
    Dann       "B" erhält eine Einladung von "C"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1" von "C"
    Und        "B" ist dem Raum "TIM Testraum 1" beigetreten

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(!ApiName1B.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName2.hasTag("insurant"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName2 |

  @TCID:TIM_ePA_AF_0705 @PRIO:1 @TESTFALL:Positiv @STATUS:Zurückgestellt
  Szenariogrundriss: 07.05 TI-M ePA - Einladung außerhalb einer Organisation - Chat - Beide User jeweils in Freigabeliste (HBA-User an Versicherten)
    Angenommen Es werden folgende Clients reserviert:
      | A | INSURANT     | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "B" hinterlegt "A" in seiner Freigabeliste
    Wenn       "B" schreibt "A" direkt "Testnachricht 1"
    Dann       "A" erhält eine Einladung von "B"
    Und        "A" bestätigt eine Einladung von "B"
    Und        "A" empfängt eine Nachricht "Testnachricht 1" von "B"
    Und        "A" verlässt Chat mit "B"
    Und        "B" verlässt Chat mit "A"
    Und        "B" löscht "A" in seiner Freigabeliste

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(true)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("insurant"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1 | ApiName2 |

  @TCID:TIM_ePA_AF_0706 @PRIO:1 @TESTFALL:Positiv @STATUS:Zurückgestellt
  Szenariogrundriss: 07.06 TI-M ePA - Einladung außerhalb einer Organisation - Chat - Beide User jeweils in Freigabeliste (Versicherter an HBA-User)
    Angenommen Es werden folgende Clients reserviert:
      | A | INSURANT     | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "B" hinterlegt "A" in seiner Freigabeliste
    Wenn       "A" schreibt "B" direkt "Testnachricht 1"
    Dann       "B" erhält eine Einladung von "A"
    Und        "B" bestätigt eine Einladung von "A"
    Und        "B" empfängt eine Nachricht "Testnachricht 1" von "A"
    Und        "A" verlässt Chat mit "B"
    Und        "B" verlässt Chat mit "A"
    Und        "B" löscht "A" in seiner Freigabeliste

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(true)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("insurant"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1 | ApiName2 |

  @TCID:TIM_ePA_AF_0707 @PRIO:1 @TESTFALL:Positiv @STATUS:Zurückgestellt
  Szenariogrundriss: 07.07 Einladung außerhalb einer Organisation - Chat - Beide User jeweils in Freigabeliste (Organisations-User an Versicherter)
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN    | <ApiName1A> |
      | B | CLIENT       | <ApiName1B> |
      | C | INSURANT     | <ApiName2>  |
    Und        "C" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "B" hinterlegt "C" in seiner Freigabeliste
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "B"
    Wenn       "B" schreibt "C" direkt "Testnachricht 1"
    Dann       "C" erhält eine Einladung von "B"
    Und        "C" bestätigt eine Einladung von "B"
    Und        "C" empfängt eine Nachricht "Testnachricht 1" von "B"
    Und        "C" verlässt Chat mit "B"
    Und        "B" verlässt Chat mit "C"
    Und        "B" löscht "C" in seiner Freigabeliste

  #@Shuffle(true)
  #@DistinctColumn(ApiName1B)
  #@MaxSameColumnProperty(ApiName1B,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(!ApiName2.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @AllowSelfCombine(true)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName2.hasTag("insurant"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName2 |

  @TCID:TIM_ePA_AF_0708 @PRIO:1 @TESTFALL:Positiv @STATUS:Zurückgestellt
  Szenariogrundriss: 07.08 Einladung außerhalb einer Organisation - Chat - Beide User jeweils in Freigabeliste (Versicherter an Organisations-User)
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN    | <ApiName1A> |
      | B | CLIENT       | <ApiName1B> |
      | C | INSURANT     | <ApiName2>  |
    Und        "C" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "B" hinterlegt "C" in seiner Freigabeliste
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "B"
    Wenn       "C" schreibt "B" direkt "Testnachricht 1"
    Dann       "B" erhält eine Einladung von "C"
    Und        "B" bestätigt eine Einladung von "C"
    Und        "B" empfängt eine Nachricht "Testnachricht 1" von "C"
    Und        "C" verlässt Chat mit "B"
    Und        "B" verlässt Chat mit "C"
    Und        "B" löscht "C" in seiner Freigabeliste

  #@Shuffle(true)
  #@DistinctColumn(ApiName1B)
  #@MaxSameColumnProperty(ApiName1B,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(!ApiName2.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @AllowSelfCombine(true)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName2.hasTag("insurant"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName2 |

  @TCID:TIM_ePA_AF_0709 @PRIO:1 @TESTFALL:Positiv @STATUS:Zurückgestellt
  Szenariogrundriss: 07.09 TI-M ePA - Einladung außerhalb einer Organisation - Chat - Beide User jeweils in Freigabeliste (HBA-User an Versicherten)
    Angenommen Es werden folgende Clients reserviert:
      | A | INSURANT     | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "A" setzt seinen Authorization Mode auf "BlockAll"
    Und        "A" prüft, ob seinen Authorization Mode auf "BlockAll" gesetzt ist
    Und        "B" hinterlegt "A" in seiner Freigabeliste
    Wenn       "B" schreibt "A" direkt "Testnachricht 1"
    Dann       erhält "A" einen Responsecode 403
    Und        "B" erhält KEINE Einladung von "A" [Retry 10 - 3]
    Und        "B" hinterlegt "A" in der Allowliste
    Wenn       "B" schreibt "A" direkt "Testnachricht 1"
    Dann       "A" erhält eine Einladung von "B"
    Und        "A" bestätigt eine Einladung von "B"
    Und        "A" empfängt eine Nachricht "Testnachricht 1" von "B"
    Und        "A" verlässt Chat mit "B"
    Und        "B" verlässt Chat mit "A"
    Und        "B" löscht "A" in seiner Freigabeliste

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(true)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("insurant"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1 | ApiName2 |

  @TCID:TIM_ePA_AF_0710 @PRIO:1 @TESTFALL:Positiv @STATUS:Zurückgestellt
  Szenariogrundriss: 07.10 TI-M ePA - Einladung außerhalb einer Organisation - Chat - Beide User jeweils in Freigabeliste (Versicherter an HBA-User)
    Angenommen Es werden folgende Clients reserviert:
      | A | INSURANT     | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "A" setzt seinen Authorization Mode auf "BlockAll"
    Und        "A" prüft, ob seinen Authorization Mode auf "BlockAll" gesetzt ist
    Und        "B" hinterlegt "A" in seiner Freigabeliste
    Wenn       "A" schreibt "B" direkt "Testnachricht 1"
    Dann       erhält "A" einen Responsecode 403
    Und        "B" erhält KEINE Einladung von "A" [Retry 10 - 3]
    Und        "B" hinterlegt "A" in der Allowliste
    Wenn       "B" schreibt "A" direkt "Testnachricht 1"
    Dann       "B" erhält eine Einladung von "A"
    Und        "B" bestätigt eine Einladung von "A"
    Und        "B" empfängt eine Nachricht "Testnachricht 1" von "A"
    Und        "A" verlässt Chat mit "B"
    Und        "B" verlässt Chat mit "A"
    Und        "B" löscht "A" in seiner Freigabeliste

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(true)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("insurant"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1 | ApiName2 |

  @TCID:TIM_ePA_AF_0711 @PRIO:1 @TESTFALL:Positiv @STATUS:Zurückgestellt
  Szenariogrundriss: 07.11 Einladung außerhalb einer Organisation - Chat - Beide User jeweils in Freigabeliste (Organisations-User an Versicherter)
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN    | <ApiName1A> |
      | B | CLIENT       | <ApiName1B> |
      | C | INSURANT     | <ApiName2>  |
    Und        "C" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "C" setzt seinen Authorization Mode auf "BlockAll"
    Und        "C" prüft, ob seinen Authorization Mode auf "BlockAll" gesetzt ist
    Und        "B" hinterlegt "C" in seiner Freigabeliste
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "B"
    Wenn       "B" schreibt "C" direkt "Testnachricht 1"
    Dann       erhält "B" einen Responsecode 403
    Und        "C" erhält KEINE Einladung von "B" [Retry 10 - 3]
    Und        "C" hinterlegt "B" in der Allowliste
    Wenn       "B" schreibt "C" direkt "Testnachricht 1"
    Dann       "C" erhält eine Einladung von "B"
    Und        "C" bestätigt eine Einladung von "B"
    Und        "C" empfängt eine Nachricht "Testnachricht 1" von "B"
    Und        "C" verlässt Chat mit "B"
    Und        "B" verlässt Chat mit "C"
    Und        "B" löscht "C" in seiner Freigabeliste

  #@Shuffle(true)
  #@DistinctColumn(ApiName1B)
  #@MaxSameColumnProperty(ApiName1B,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(!ApiName2.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @AllowSelfCombine(true)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName2.hasTag("insurant"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName2 |

  @TCID:TIM_ePA_AF_0712 @PRIO:1 @TESTFALL:Positiv @STATUS:Zurückgestellt
  Szenariogrundriss: 07.12 Einladung außerhalb einer Organisation - Chat - Beide User jeweils in Freigabeliste (Versicherter an Organisations-User)
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN    | <ApiName1A> |
      | B | CLIENT       | <ApiName1B> |
      | C | INSURANT     | <ApiName2>  |
    Und        "C" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "C" setzt seinen Authorization Mode auf "BlockAll"
    Und        "C" prüft, ob seinen Authorization Mode auf "BlockAll" gesetzt ist
    Und        "B" hinterlegt "C" in seiner Freigabeliste
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "B"
    Wenn       "C" schreibt "B" direkt "Testnachricht 1"
    Dann       erhält "B" einen Responsecode 403
    Und        "C" erhält KEINE Einladung von "B" [Retry 10 - 3]
    Und        "C" hinterlegt "B" in der Allowliste
    Wenn       "B" schreibt "C" direkt "Testnachricht 1"
    Dann       "B" erhält eine Einladung von "C"
    Und        "B" bestätigt eine Einladung von "C"
    Und        "B" empfängt eine Nachricht "Testnachricht 1" von "C"
    Und        "C" verlässt Chat mit "B"
    Und        "B" verlässt Chat mit "C"
    Und        "B" löscht "C" in seiner Freigabeliste

  #@Shuffle(true)
  #@DistinctColumn(ApiName1B)
  #@MaxSameColumnProperty(ApiName1B,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(!ApiName2.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @AllowSelfCombine(true)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName2.hasTag("insurant"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName2 |

    @TCID:TIM_ePA_AF_0713 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 07.13 Einladung außerhalb einer Organisation - Einladung in Chat - Ablehnung der Einladung (Versicherter - HBA-User)
    Angenommen Es werden folgende Clients reserviert:
      | A | INSURANT     | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" findet "B" in FHIR
    Und        "B" hinterlegt "A" in seiner Freigabeliste
    Und        "A" schreibt "B" direkt "Testnachricht 1"
    Und        "B" erhält eine Einladung von "A"
    Wenn       "B" lehnt eine Einladung zum Chat mit "A" ab
    Dann       "B" ist dem Chat mit "A" nicht beigetreten [Retry 10 - 3]

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("insurant"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1 | ApiName2 |

    @TCID:TIM_ePA_AF_0714 @PRIO:2 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 07.14 Einladung außerhalb einer Organisation - Einladung in Raum - Ablehnung der Einladung (HBA-User - Versicherter)
    Angenommen Es werden folgende Clients reserviert:
      | A | INSURANT     | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "B" hinterlegt seine MXID im Verzeichnis Dienst
    Und        "B" hinterlegt "A" in seiner Freigabeliste
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet "B" in FHIR
    Und        "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Und        "B" erhält eine Einladung in Raum "TIM Testraum 1" von "A"
    Wenn       "B" lehnt eine Einladung von "A" für Raum "TIM Testraum 1" ab
    Dann       "B" ist dem Raum "TIM Testraum 1" nicht beigetreten [Retry 10 - 3]

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("insurant"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1 | ApiName2 |

    @TCID:TIM_ePA_AF_0716 @PRIO:2 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 07.16 Einladung außerhalb einer Organisation - Einladung in Chat - Ablehnung der Einladung (Versicherter an Organisations-User)
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN   | <ApiName1A> |
      | B | CLIENT      | <ApiName1B> |
      | C | INSURANT    | <ApiName2>  |
    Und        "C" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "B" hinterlegt "C" in seiner Freigabeliste
    Und        "C" schreibt "B" über den Healthcare-Service "HealthcareServiceName2" direkt "Testnachricht 1"
    Und        "B" erhält eine Einladung von "C"
    Wenn       "B" lehnt eine Einladung zum Chat mit "C" ab
    Dann       "B" ist dem Chat mit "C" nicht beigetreten [Retry 10 - 3]

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2B,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(!ApiName1B.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName2.hasTag("insurant"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName2 |

    @TCID:TIM_ePA_AF_0718 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 07.18 Einladung außerhalb einer Organisation - Einladung in Raum - Ablehnung der Einladung (Organisations-User an Versicherten)
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN   | <ApiName1A> |
      | B | CLIENT      | <ApiName1B> |
      | C | INSURANT    | <ApiName2> |
    Und        "C" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "B" hinterlegt "C" in seiner Freigabeliste
    Und        "B" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "B" lädt "C" über den HealthcareService "HealthcareServiceName1" in den Chat-Raum "TIM Testraum 1" ein
    Und        "C" erhält eine Einladung in Raum "TIM Testraum 1" von "B"
    Wenn       "C" lehnt eine Einladung von "B" für Raum "TIM Testraum 1" ab
    Dann       "C" ist dem Raum "TIM Testraum 1" nicht beigetreten [Retry 10 - 3]

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2B,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(!ApiName1B.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName2.hasTag("insurant"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2B.hasTag("prefIOP"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName2 |

  @TCID:TIM_ePA_AF_0717 @PRIO:1 @TESTFALL:Negativ @STATUS:Zurückgestellt
  Szenariogrundriss: 07.17 TI-M ePA - Einladung außerhalb einer Organisation - Chat - Versicherter lädt 2. HBA User in Direktchat einladen (Versicherter an HBA-User)
    Angenommen Es werden folgende Clients reserviert:
      | A | INSURANT     | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
      | C | PRACTITIONER | <ApiName3> |
    Und        "A" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "B" hinterlegt "A" in seiner Freigabeliste
    Und        "C" hinterlegt "A" in seiner Freigabeliste
    Und        "A" schreibt "B" direkt "Testnachricht 1"
    Dann       "B" erhält eine Einladung von "A"
    Und        "B" bestätigt eine Einladung von "A"
    Und        "B" empfängt eine Nachricht "Testnachricht 1" von "A"
    Wenn       "A" versucht "C" in Chat mit "B" einzuladen
    Dann       erhält "A" einen Responsecode 403
    Und        "B" löscht "A" in seiner Freigabeliste
    Und        "C" löscht "A" in seiner Freigabeliste

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @Filter(!ApiName1.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
    @Filter(!ApiName1.properties["homeserver"].equals(ApiName3.properties["homeserver"]))
    @AllowSelfCombine(true)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName3.hasTag("client"))
    @Filter(ApiName1.hasTag("insurant"))
    @Filter(ApiName2.hasTag("practitioner"))
    @Filter(ApiName3.hasTag("practitioner"))

    Beispiele:
      | ApiName1 | ApiName2 | ApiName3 |

  @TCID:TIM_ePA_AF_0718 @PRIO:1 @TESTFALL:Negativ @STATUS:Zurückgestellt
  Szenariogrundriss: 07.18 TI-M ePA - Einladung außerhalb einer Organisation - Chat - Versicherter lädt 2. Org-User in Direktchat einzuladen (Versicherter an Org-User)
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN    | <ApiName1A> |
      | B | INSURANT     | <ApiName2>  |
      | C | CLIENT       | <ApiName1B> |
      | D | CLIENT       | <ApiName1C>  |
    Und        "B" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "C" hinterlegt "B" in seiner Freigabeliste
    Und        "D" hinterlegt "B" in seiner Freigabeliste
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "C"
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "D"
    Und        "B" schreibt "C" direkt "Testnachricht 1"
    Dann       "C" erhält eine Einladung von "B"
    Und        "C" bestätigt eine Einladung von "B"
    Und        "C" empfängt eine Nachricht "Testnachricht 1" von "B"
    Wenn       "B" versucht "D" in Chat mit "B" einzuladen
    Dann       erhält "B" einen Responsecode 403
    Und        "C" löscht "B" in seiner Freigabeliste
    Und        "D" löscht "B" in seiner Freigabeliste

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1C.properties["homeserver"]))
    @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
    @AllowSelfCombine(true)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName1C.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName2.hasTag("insurant"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName1C | ApiName2 |

    @TCID:TIM_ePA_AF_0719 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 07.19 TI-M ePA - Einladung außerhalb einer Organisation - Im Verzeichnisdienst nicht registrierter Nutzer wird gesucht durch HBA-User
    Angenommen Es werden folgende Clients reserviert:
      | A | INSURANT     | <ApiName1> |
      | B | CLIENT       | <ApiName2> |
    Dann       "A" findet TI-Messenger-Nutzer "B" bei Suche im Practitioner-Verzeichnis im VZD NICHT [Retry 13 - 4]
    Und        "A" findet TI-Messenger-Nutzer "B" bei Suche im Organisations-Verzeichnis im VZD NICHT [Retry 13 - 4]

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("insurant"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))

    Beispiele:
      | ApiName1 | ApiName2 |



