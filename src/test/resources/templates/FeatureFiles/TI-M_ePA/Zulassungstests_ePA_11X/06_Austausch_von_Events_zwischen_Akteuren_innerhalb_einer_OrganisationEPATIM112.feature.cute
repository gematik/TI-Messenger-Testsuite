# language: de
@File:FeatureFile_06_ePA
@PRODUKT:TIM_ePA_11X
@AF-ID:AF_10063-01
@AF-ID:AF_10233

Funktionalität:  06. Austausch von Events zwischen Akteuren innerhalb einer Organisation

  #Muss noch angepasst werden
  AF_10063-01 - Austausch von Events zwischen Akteuren innerhalb einer Organisation

  AF_10233 - Versicherteneinladung unterbinden

  Inhalt
  TF 1     Versichertenkommunikation innerhalb einer Organisation - Allow All (HBA lädt 2 Versicherte ein)
  TF 2     Versichertenkommunikation innerhalb einer Organisation - Block All (HBA lädt 2 Versicherte ein)
  TF 3     Versichertenkommunikation innerhalb einer Organisation - Allow All (Org-User lädt 2 Versicherte ein)
  TF 4     Versichertenkommunikation innerhalb einer Organisation - Block All (Org-User lädt 2 Versicherte ein)
  TF 5     Versichertenkommunikation innerhalb einer Organisation - Allow All - Chat (Versicherter lädt ein Versichertern) (Negativ)
  TF 6     Versichertenkommunikation innerhalb einer Organisation - BLock All - Raum (Versicherter lädt ein Versichertern) (Negativ)

  @TCID:TIM_ePA_AF_0601 @PRIO:1 @TESTFALL:Positiv @STATUS:Zurückgestellt
  Szenariogrundriss: 06.01 TI-M ePA - Versichertenkommunikation innerhalb einer Organisation - Raum - HBA User lädt 2. Versicherten in Raum mit Versicherten ein (HBA-User an Versicherten)
    Angenommen Es werden folgende Clients reserviert:
      | A | INSURANT     | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
      | C | INSURANT     | <ApiName3> |
    Und        "A","C" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "B" hinterlegt "A" in seiner Freigabeliste
    Und        "B" hinterlegt "C" in seiner Freigabeliste
    Und        "B" erstellt einen Chat-Raum "TIM Testraum 1"
    Wenn       "B" lädt "A" in Chat-Raum "TIM Testraum 1" ein
    Dann       "A" erhält eine Einladung von "B"
    Und        "A" bestätigt eine Einladung von "B"
    Wenn       "B" lädt "C" in Chat-Raum "TIM Testraum 1" ein
    Dann       "C" erhält eine Einladung von "B"
    Und        "C" bestätigt eine Einladung von "B"
    Und        "C" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Und        "A" empfängt eine Nachricht "Testnachricht 1" von "C" im Raum "TIM Testraum 1"
    Und        "B" empfängt eine Nachricht "Testnachricht 1" von "C" im Raum "TIM Testraum 1"
    Und        "A" sendet die Nachricht "Testnachricht 2" an den Raum "TIM Testraum 1"
    Und        "B" empfängt eine Nachricht "Testnachricht 2" von "A" im Raum "TIM Testraum 1"
    Und        "C" empfängt eine Nachricht "Testnachricht 2" von "A" im Raum "TIM Testraum 1"
    Und        "A" verlässt Raum "TIM Testraum 1"
    Und        "B" verlässt Raum "TIM Testraum 1"
    Und        "C" verlässt Raum "TIM Testraum 1"
    Und        "B" löscht "A" in seiner Freigabeliste
    Und        "B" löscht "C" in seiner Freigabeliste

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    #@Filter(ApiName1.properties["homeserver"].equals(ApiName3.properties["homeserver"]))
    @Filter(!ApiName1.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
    @Filter(ApiName1.properties["homeserver"].equals(ApiName3.properties["homeserver"]))
    @AllowSelfCombine(true)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName3.hasTag("client"))
    @Filter(ApiName1.hasTag("insurant"))
    @Filter(ApiName2.hasTag("practitioner"))
    @Filter(ApiName3.hasTag("insurant"))

    Beispiele:
      | ApiName1 | ApiName2 | ApiName3 |

  @TCID:TIM_ePA_AF_0602 @PRIO:1 @TESTFALL:Positiv @STATUS:Zurückgestellt
  Szenariogrundriss: 06.02 TI-M ePA - Versichertenkommunikation innerhalb einer Organisation - Raum - HBA User lädt 2. Versicherten in Raum mit Versicherten ein (HBA-User an Versicherten)
    Angenommen Es werden folgende Clients reserviert:
      | A | INSURANT     | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
      | C | INSURANT     | <ApiName3> |
    Und        "A","C" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "A", "C" setzt seinen Authorization Mode auf "BlockAll"
    Und        "A" hinterlegt "B" in der Allowliste
    Und        "C" hinterlegt "B" in der Allowliste
    Und        "B" hinterlegt "A" in seiner Freigabeliste
    Und        "B" hinterlegt "C" in seiner Freigabeliste
    Und        "B" erstellt einen Chat-Raum "TIM Testraum 1"
    Wenn       "B" lädt "A" in Chat-Raum "TIM Testraum 1" ein
    Dann       "A" erhält eine Einladung von "B"
    Und        "A" bestätigt eine Einladung von "B"
    Wenn       "B" lädt "C" in Chat-Raum "TIM Testraum 1" ein
    Dann       "C" erhält eine Einladung von "B"
    Und        "C" bestätigt eine Einladung von "B"
    Und        "C" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Und        "A" empfängt eine Nachricht "Testnachricht 1" von "C" im Raum "TIM Testraum 1"
    Und        "B" empfängt eine Nachricht "Testnachricht 1" von "C" im Raum "TIM Testraum 1"
    Und        "A" sendet die Nachricht "Testnachricht 2" an den Raum "TIM Testraum 1"
    Und        "B" empfängt eine Nachricht "Testnachricht 2" von "A" im Raum "TIM Testraum 1"
    Und        "C" empfängt eine Nachricht "Testnachricht 2" von "A" im Raum "TIM Testraum 1"
    Und        "A" verlässt Raum "TIM Testraum 1"
    Und        "B" verlässt Raum "TIM Testraum 1"
    Und        "C" verlässt Raum "TIM Testraum 1"
    Und        "B" löscht "A" in seiner Freigabeliste
    Und        "B" löscht "C" in seiner Freigabeliste

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    #@Filter(ApiName1.properties["homeserver"].equals(ApiName3.properties["homeserver"]))
    @Filter(!ApiName1.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
    @Filter(ApiName1.properties["homeserver"].equals(ApiName3.properties["homeserver"]))
    @AllowSelfCombine(true)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName3.hasTag("client"))
    @Filter(ApiName1.hasTag("insurant"))
    @Filter(ApiName2.hasTag("practitioner"))
    @Filter(ApiName3.hasTag("insurant"))

    Beispiele:
      | ApiName1 | ApiName2 | ApiName3 |

  @TCID:TIM_ePA_AF_0603 @PRIO:1 @TESTFALL:Positiv @STATUS:Zurückgestellt
  Szenariogrundriss: 06.03 TI-M ePA - Versichertenkommunikation innerhalb einer Organisation - Raum - Org-User lädt 2. Versicherten in Raum mit Versicherten ein (Org-User an Versicherten)
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN    | <ApiName1A> |
      | B | INSURANT     | <ApiName2A>  |
      | C | CLIENT       | <ApiName1B> |
      | D | INSURANT     | <ApiName2B>  |
    Und        "B","D" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "C"
    Und        "C" hinterlegt "B" in seiner Freigabeliste
    Und        "C" hinterlegt "D" in seiner Freigabeliste
    Und        "C" erstellt einen Chat-Raum "TIM Testraum 1"
    Wenn       "C" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Dann       "B" erhält eine Einladung von "C"
    Und        "B" bestätigt eine Einladung von "C"
    Wenn       "C" lädt "D" in Chat-Raum "TIM Testraum 1" ein
    Dann       "D" erhält eine Einladung von "C"
    Und        "D" bestätigt eine Einladung von "C"
    Und        "D" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Und        "B" empfängt eine Nachricht "Testnachricht 1" von "D" im Raum "TIM Testraum 1"
    Und        "C" empfängt eine Nachricht "Testnachricht 1" von "D" im Raum "TIM Testraum 1"
    Und        "B" sendet die Nachricht "Testnachricht 2" an den Raum "TIM Testraum 1"
    Und        "C" empfängt eine Nachricht "Testnachricht 2" von "B" im Raum "TIM Testraum 1"
    Und        "D" empfängt eine Nachricht "Testnachricht 2" von "B" im Raum "TIM Testraum 1"
    Und        "C" löscht "B" in seiner Freigabeliste
    Und        "C" löscht "D" in seiner Freigabeliste
    Und        "B" verlässt Raum "TIM Testraum 1"
    Und        "C" verlässt Raum "TIM Testraum 1"
    Und        "D" verlässt Raum "TIM Testraum 1"

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(ApiName2A.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
    @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2A.properties["homeserver"]))
    @AllowSelfCombine(true)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2A.hasTag("client"))
    @Filter(ApiName2B.hasTag("client"))
    @Filter(ApiName2A.hasTag("insurant"))
    @Filter(ApiName2B.hasTag("insurant"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName2A | ApiName2B |

  @TCID:TIM_ePA_AF_0604 @PRIO:1 @TESTFALL:Positiv @STATUS:Zurückgestellt
  Szenariogrundriss: 06.04 TI-M ePA - Versichertenkommunikation innerhalb einer Organisation - Raum - Org-User lädt 2. Versicherten in Raum mit Versicherten ein (Org-User an Versicherten)
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN    | <ApiName1A> |
      | B | INSURANT     | <ApiName2A>  |
      | C | CLIENT       | <ApiName1B> |
      | D | INSURANT     | <ApiName2B>  |
    Und        "B", "D" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "B", "D" setzt seinen Authorization Mode auf "BlockAll"
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "C"
    Und        "B" hinterlegt "C" in der Allowliste
    Und        "D" hinterlegt "C" in der Allowliste
    Und        "C" hinterlegt "B" in seiner Freigabeliste
    Und        "C" hinterlegt "D" in seiner Freigabeliste
    Und        "C" erstellt einen Chat-Raum "TIM Testraum 1"
    Wenn       "C" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Dann       "B" erhält eine Einladung von "C"
    Und        "B" bestätigt eine Einladung von "C"
    Wenn       "C" lädt "D" in Chat-Raum "TIM Testraum 1" ein
    Dann       "D" erhält eine Einladung von "C"
    Und        "D" bestätigt eine Einladung von "C"
    Und        "D" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Und        "B" empfängt eine Nachricht "Testnachricht 1" von "D" im Raum "TIM Testraum 1"
    Und        "C" empfängt eine Nachricht "Testnachricht 1" von "D" im Raum "TIM Testraum 1"
    Und        "B" sendet die Nachricht "Testnachricht 2" an den Raum "TIM Testraum 1"
    Und        "C" empfängt eine Nachricht "Testnachricht 2" von "B" im Raum "TIM Testraum 1"
    Und        "D" empfängt eine Nachricht "Testnachricht 2" von "B" im Raum "TIM Testraum 1"
    Und        "C" löscht "B" in seiner Freigabeliste
    Und        "C" löscht "D" in seiner Freigabeliste
    Und        "B" verlässt Raum "TIM Testraum 1"
    Und        "C" verlässt Raum "TIM Testraum 1"
    Und        "D" verlässt Raum "TIM Testraum 1"

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(ApiName2A.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
    @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2A.properties["homeserver"]))
    @AllowSelfCombine(true)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2A.hasTag("client"))
    @Filter(ApiName2B.hasTag("client"))
    @Filter(ApiName2A.hasTag("insurant"))
    @Filter(ApiName2B.hasTag("insurant"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName2A | ApiName2B |

    # Evtl wird hier die Suche auf dem Homeserver schon unterbunden ... dann Schritt auskommentieren
  @TCID:TIM_ePA_AF_0605 @PRIO:1 @TESTFALL:Negativ @STATUS:Zurückgestellt
  Szenariogrundriss: 06.05 TI-M ePA - Versichertenkommunikation innerhalb einer Organisation - Chat - Versicherter versucht Versicherten einzuladen (AllowAll)
    Angenommen Es werden folgende Clients reserviert:
      | A | INSURANT    | <ApiName1A> |
      | B | INSURANT    | <ApiName1B> |
    Und        "A" prüft, ob seinen Authorization Mode auf "AllowAll" gesetzt ist
    Und        "A" findet TI-Messenger-Nutzer "B" bei der Suche im HomeServer
    Wenn       "A" versucht "B" direkt "Testnachricht 1" zu schreiben
    Dann       erhält "A" einen Responsecode 403
    Und        "B" erhält KEINE Einladung von "A" [Retry 10 - 3]

    @EqualProperty(homeserver)
    @AllowSelfCombine(true)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("client"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName1A.hasTag("insurant"))
    @Filter(ApiName1B.hasTag("insurant"))

    Beispiele:
      | ApiName1A | ApiName1B |

  @TCID:TIM_ePA_AF_0606 @PRIO:1 @TESTFALL:Negativ @STATUS:Zurückgestellt
  Szenariogrundriss: 06.06 TI-M ePA - Versichertenkommunikation innerhalb einer Organisation - Raum - Versicherter versucht Versicherten einzuladen (BlockAll)
    Angenommen Es werden folgende Clients reserviert:
      | A | INSURANT    | <ApiName1A> |
      | B | INSURANT    | <ApiName1B> |
    Und        "B" setzt seinen Authorization Mode auf "BlockAll"
    Und        "B" prüft, ob seinen Authorization Mode auf "BlockAll" gesetzt ist
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Wenn       "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Dann       erhält "A" einen Responsecode 403
    Und        "B" erhält KEINE Einladung von "A" [Retry 10 - 3]
    Und        "B" hinterlegt "A" in der Allowliste
    Wenn       "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Dann       erhält "A" einen Responsecode 403
    Und        "B" erhält KEINE Einladung von "A" [Retry 10 - 3]

    @EqualProperty(homeserver)
    @AllowSelfCombine(true)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("client"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName1A.hasTag("insurant"))
    @Filter(ApiName1B.hasTag("insurant"))

    Beispiele:
      | ApiName1A | ApiName1B |