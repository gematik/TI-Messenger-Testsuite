# language: de
@File:FeatureFile_09 @Ctl:UseCase
@PRODUKT:TIM_FD @PRODUKT:TIM_Client
@AF-ID:AF_10061-01
@AK-ID:ML-123654 @AK-ID:ML-123663 @AK-ID:ML-132864 @AK-ID:ML-132592
@AF-ID:AF_10064-01
@AK-ID:ML-123672 @AK-ID:ML-123891 @AK-ID:ML-132589 @AK-ID:ML-137902
@AF-ID:AF_10058-01
@AK-ID:ML-123612 @AK-ID:ML-132588
@AF-ID:AF_10059-01
@AK-ID:ML-123627 @AK-ID:ML-132586
@AF-ID:AF_10036
Funktionalität:  09. Einladung von Akteuren außerhalb einer Organisation

  AF_10061-01 - Einladung von Akteuren außerhalb einer Organisation
    ML-123654 - Suche im VZD-FHIR-Directory
    ML-123663 - Akteure sind dem Chatraum beigetreten
    ML-132864 - Berechtigungsprüfung aller Stufen
    ML-132592 - TI-M Rohdatenerfassung und -lieferung

  AF_10064-01 - Föderationszugehörigkeit eines Messenger-Service prüfen
    ML-123672 - Föderationsliste vom VZD-FHIR-Directory abrufen
    ML-123891 - Matrix-Domain Teil der Föderationsliste & Aktualitätscheck
    ML-132589 - TI-M Rohdatenerfassung und -lieferung
    ML-137902 - Aktualität - Föderationsliste Messenger-Proxy

  AF_10058-01 - Akteur (User-HBA) im Verzeichnisdienst hinzufügen
    ML-123612 - Akteur als Practitioner hinzufügen
    ML-132588 - TI-M Rohdatenerfassung und -lieferung

  AF_10059-01 - Organisationsressourcen im Verzeichnisdienst hinzufügen
    ML-123627 - Organisationsressourcen im VZD-FHIR-Directory hinzufügen
    ML-132586 - TI-M Rohdatenerfassung und -lieferung

  In diesem Anwendungsfall erfolgt gleichzeitig eine Prüfung des Berechtigungskonzept.

  Inhalt
  TF  1 &  2 Einladung in Chat/Raum Teilqualifizierte Suche (HBA an HBA)
  TF  3      Einladung in Chat (OrgUser an HBA) (Negativ)
  TF  4 &  5 Ablehnung der Einladung in Chat/Raum (HBA an HBA)
  TF  6 &  7 Ablehnung der Einladung in Chat/Raum (OrgUser an OrgUser)
  TF  8 &  9 Negativ-Tests zur Einladung - Dritter Nutzer soll in Chat eingeladen werden (HBA & OrgUser)
  TF 10 & 11 Negativ-Tests zur Einladung - Im Verzeichnisdienst nicht registrierter Nutzer wird gesucht (HBA & OrgUser)
  TF 12 & 13 Negativ-Tests zur Einladung - Im Verzeichnisdienst nicht registrierter Nutzer wird angeschrieben (HBA & OrgUser)
  TF 14 & 15 Einladung durch nicht im Verzeichnisdienst registrierte User in Chat/Raum (HBA an HBA)
  TF 16 & 17 Einladung durch nicht im Verzeichnisdienst registrierte User in Chat/Raum (OrgUser und OrgUser)
  TF 18      Suche auf dem Homeserver (Negativ)

  # TODO Bei mehreren Anbietern MaxSameColumnProperty & Shuffle anschalten

  @BP:P2P @Ctl:Chat @Ctl:SeachPart @Ctl:BasicTest
    @TCID:TIM_11_AF_901 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 09.01 Einladung außerhalb einer Organisation - Einladung in Chat - Teilqualifizierte Suche (HBA-User an HBA-User)
    Angenommen Es werden folgende Clients reserviert:
      | A | PRACTITIONER | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" findet TI-Messenger-Nutzer "B" bei Suche nach Namen minus 0-1 (Anzahl vorne-hinten) Char(s) abgeschnitten
    Wenn       "A" schreibt "B" direkt "Testnachricht 1"
    Dann       "B" erhält eine Einladung von "A"
    Und        "B" bestätigt eine Einladung von "A"
    Und        "B" empfängt eine Nachricht "Testnachricht 1" von "A"

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("practitioner"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1 | ApiName2 |

  @BP:P2P @Ctl:Raum @Ctl:SeachPart
    @TCID:TIM_11_AF_902 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 09.02 Einladung außerhalb einer Organisation - Einladung in Raum - Teilqualifizierte Suche (HBA-User an HBA-User)
    Angenommen Es werden folgende Clients reserviert:
      | A | PRACTITIONER | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet TI-Messenger-Nutzer "B" bei Suche nach Namen minus 0-1 (Anzahl vorne-hinten) Char(s) abgeschnitten
    Wenn       "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Dann       "B" erhält eine Einladung von "A"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1" von "A"
    Und        "B" ist dem Raum "TIM Testraum 1" beigetreten

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("practitioner"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1 | ApiName2 |

  @BP:O2P_extern @Ctl:OrgAdmin @Ctl:Chat @Ctl:BasicTest @Ctl:OrgOnly
    @TCID:TIM_11_AF_903 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.03 Einladung außerhalb einer Organisation - Einladung in Chat - Organisations-User lädt HBA-User ein
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN    | <ApiName1A> |
      | B | CLIENT       | <ApiName1B> |
      | C | PRACTITIONER | <ApiName2>  |
    Wenn       "C" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "B"
    Und        "B" findet "C" in FHIR
    Und        "B" versucht "C" direkt "Testnachricht 1" zu schreiben
    Dann       erhält "B" einen Responsecode 403

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1B,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(!ApiName1B.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName2 |

  @BP:P2P @Ctl:Chat @Ctl:InvitReject @Ctl:BasicTest
    @TCID:TIM_11_AF_904 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 09.04 Einladung außerhalb einer Organisation - Einladung in Chat - Ablehnung der Einladung (HBA-User an HBA-User)
    Angenommen Es werden folgende Clients reserviert:
      | A | PRACTITIONER | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" findet "B" in FHIR
    Und        "A" schreibt "B" direkt "Testnachricht 1"
    Und        "B" erhält eine Einladung von "A"
    Wenn       "B" lehnt eine Einladung zum Chat mit "A" ab
    Dann       "B" ist dem Chat mit "A" nicht beigetreten [Retry 10 - 3]

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("practitioner"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1 | ApiName2 |

  @BP:P2P @Ctl:Raum @Ctl:InvitReject @Ctl:BasicTest
    @TCID:TIM_11_AF_905 @PRIO:2 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 09.05 Einladung außerhalb einer Organisation - Einladung in Raum - Ablehnung der Einladung (HBA-User an HBA-User)
    Angenommen Es werden folgende Clients reserviert:
      | A | PRACTITIONER | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A", "B" hinterlegt seine MXID im Verzeichnis Dienst
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet "B" in FHIR
    Und        "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Und        "B" erhält eine Einladung in Raum "TIM Testraum 1" von "A"
    Wenn       "B" lehnt eine Einladung von "A" für Raum "TIM Testraum 1" ab
    Dann       "B" ist dem Raum "TIM Testraum 1" nicht beigetreten [Retry 10 - 3]

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("practitioner"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1 | ApiName2 |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Chat @Ctl:InvitReject @Ctl:OrgOnly
    @TCID:TIM_11_AF_906 @PRIO:2 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.06 Einladung außerhalb einer Organisation - Einladung in Chat - Ablehnung der Einladung (Organisations-User an Organisations-User)
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN | <ApiName1A> |
      | B | ORG_ADMIN | <ApiName2A> |
      | C | CLIENT    | <ApiName1B> |
      | D | CLIENT    | <ApiName2B> |
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "C"
    Und        "B" erstellt einen Healthcare-Service "HealthcareServiceName2" und setzen einen Endpunkt auf "D"
    Und        "C" schreibt "D" über den Healthcare-Service "HealthcareServiceName2" direkt "Testnachricht 1"
    Und        "D" erhält eine Einladung von "C"
    Wenn       "D" lehnt eine Einladung zum Chat mit "C" ab
    Dann       "D" ist dem Chat mit "C" nicht beigetreten [Retry 10 - 3]

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2B,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(ApiName2A.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
    @Filter(!ApiName1B.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName2A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2B.hasTag("client"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2B.hasTag("prefIOP"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName2A | ApiName2B |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Raum @Ctl:InvitReject @Ctl:OrgOnly
    @TCID:TIM_11_AF_907 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.07 Einladung außerhalb einer Organisation - Einladung in Raum - Ablehnung der Einladung (Organisations-User an Organisations-User)
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN | <ApiName1A> |
      | B | ORG_ADMIN | <ApiName2A> |
      | C | CLIENT    | <ApiName1B> |
      | D | CLIENT    | <ApiName2B> |
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "C"
    Und        "B" erstellt einen Healthcare-Service "HealthcareServiceName2" und setzen einen Endpunkt auf "D"
    Und        "C" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "C" lädt "D" über den HealthcareService "HealthcareServiceName2" in den Chat-Raum "TIM Testraum 1" ein
    Und        "D" erhält eine Einladung in Raum "TIM Testraum 1" von "C"
    Wenn       "D" lehnt eine Einladung von "C" für Raum "TIM Testraum 1" ab
    Dann       "D" ist dem Raum "TIM Testraum 1" nicht beigetreten [Retry 10 - 3]

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2B,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(ApiName2A.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
    @Filter(!ApiName1B.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName2A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2B.hasTag("client"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2B.hasTag("prefIOP"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName2A | ApiName2B |

  @BP:P2P @Ctl:Chat @Ctl:RejectThird @Ctl:BasicTest
    @TCID:TIM_11_AF_908 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.08 Einladung außerhalb einer Organisation - Einladung in Chat - Dritter Nutzer soll in Chat eingeladen werden (HBA)
    Angenommen Es werden folgende Clients reserviert:
      | A | PRACTITIONER | <ApiName1A> |
      | B | PRACTITIONER | <ApiName1B> |
      | C | PRACTITIONER | <ApiName2>  |
    Und        "A", "B", "C" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" findet "B" in FHIR
    Und        "A" schreibt "B" direkt "Testnachricht 1"
    Und        "B" erhält eine Einladung von "A"
    Und        "B" bestätigt eine Einladung von "A"
    Und        "B" empfängt eine Nachricht "Testnachricht 1" von "A"
    Wenn       "A" versucht "C" in Chat mit "B" einzuladen
    Dann       erhält "A" einen Responsecode 403

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1A,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
    @DistinctColumn(ApiName1A)
    @AllowSelfCombine(true)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("client"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1A.hasTag("practitioner"))
    @Filter(ApiName1B.hasTag("practitioner"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1A.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName2 |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Chat @Ctl:RejectThird @Ctl:OrgOnly
    @TCID:TIM_11_AF_909 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.09 Einladung außerhalb einer Organisation - Einladung in Chat - Dritter Nutzer soll in Chat eingeladen werden (OrgUser)
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN | <ApiName1A> |
      | B | ORG_ADMIN | <ApiName2A> |
      | C | CLIENT    | <ApiName1B> |
      | D | CLIENT    | <ApiName1C> |
      | E | CLIENT    | <ApiName2B> |
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "C"
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "D"
    Und        "B" erstellt einen Healthcare-Service "HealthcareServiceName2" und setzen einen Endpunkt auf "E"
    Und        "C" schreibt "D" über den Healthcare-Service "HealthcareServiceName1" direkt "Testnachricht 1"
    Und        "D" erhält eine Einladung von "C"
    Und        "D" bestätigt eine Einladung von "C"
    Und        "D" empfängt eine Nachricht "Testnachricht 1" von "C"
    Wenn       "C" versucht "E" in Chat mit "D" einzuladen
    Dann       erhält "C" einen Responsecode 403

    @Shuffle(true)
  #@DistinctColumn(ApiName1B)
  #@MaxSameColumnProperty(ApiName1B,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(ApiName1B.properties["homeserver"].equals(ApiName1C.properties["homeserver"]))
    @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2A.properties["homeserver"]))
    @Filter(ApiName2A.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
    @AllowSelfCombine(true)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName1C.hasTag("client"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName1C.hasTag("prefIOP"))
    @Filter(ApiName2A.hasTag("orgAdmin"))
    @Filter(ApiName2B.hasTag("client"))
    @SoftFilter(ApiName2B.hasTag("prefIOP"))

    Beispiele:
      | ApiName1A | ApiName2A | ApiName1B | ApiName1C | ApiName2B |

  @BP:P2N_extern
    @TCID:TIM_11_AF_910 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.10 Einladung außerhalb einer Organisation - Im Verzeichnisdienst nicht registrierter Nutzer wird gesucht durch HBA-User
    Angenommen Es werden folgende Clients reserviert:
      | A | PRACTITIONER | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A" hinterlegt seine MXID im Verzeichnis Dienst
    Dann       "A" findet TI-Messenger-Nutzer "B" bei Suche im Practitioner-Verzeichnis im VZD NICHT [Retry 13 - 4]
    Und        "A" findet TI-Messenger-Nutzer "B" bei Suche im Organisations-Verzeichnis im VZD NICHT [Retry 13 - 4]

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("practitioner"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1 | ApiName2 |

  @BP:O2N_extern @Ctl:OrgAdmin @Ctl:BasicTest @Ctl:OrgOnly
    @TCID:TIM_11_AF_911 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.11 Einladung außerhalb einer Organisation - Im Verzeichnisdienst nicht registrierter Nutzer wird gesucht durch Organisations-User
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN | <ApiName1A> |
      | B | CLIENT    | <ApiName1B> |
      | C | CLIENT    | <ApiName2>  |
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "B"
    Dann       "B" findet TI-Messenger-Nutzer "C" bei Suche im Practitioner-Verzeichnis im VZD NICHT [Retry 13 - 4]
    Und        "B" findet TI-Messenger-Nutzer "C" bei Suche im Organisations-Verzeichnis im VZD NICHT [Retry 13 - 4]

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1B,homeserver,2)
  #@DistinctColumn(ApiName1B)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName2 |

  @BP:P2N_extern
    @TCID:TIM_11_AF_912 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.12 Einladung außerhalb einer Organisation - Im Verzeichnisdienst nicht registrierter Nutzer wird angeschrieben durch HBA-User
    Angenommen Es werden folgende Clients reserviert:
      | A | PRACTITIONER | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A" hinterlegt seine MXID im Verzeichnis Dienst
    Wenn       "A" versucht "B" direkt "Testnachricht 1" zu schreiben
    Dann       erhält "A" einen Responsecode 403
    Und        "B" erhält KEINE Einladung von "A" [Retry 10 - 3]

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("practitioner"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1 | ApiName2 |

  @BP:O2N_extern @Ctl:OrgAdmin @Ctl:OrgOnly
    @TCID:TIM_11_AF_913 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.13 Einladung außerhalb einer Organisation - Im Verzeichnisdienst nicht registrierter Nutzer wird angeschrieben durch Organisations-User
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN | <ApiName1A> |
      | B | CLIENT    | <ApiName1B> |
      | C | CLIENT    | <ApiName2>  |
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "B"
    Wenn       "B" versucht "C" direkt "Testnachricht 1" zu schreiben
    Dann       erhält "B" einen Responsecode 403
    Und        "C" erhält KEINE Einladung von "B" [Retry 10 - 3]

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1B,homeserver,2)
  #@DistinctColumn(ApiName1B)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName2 |

  @BP:N2P_extern @Ctl:Chat
    @TCID:TIM_11_AF_914 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.14 Einladung außerhalb einer Organisation - Einladung in Chat - HBA-User ohne Eintrag im Verzeichnisdienst versucht HBA-User einzuladen
    Angenommen Es werden folgende Clients reserviert:
      | A | PRACTITIONER | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A" hinterlegt seine MXID im Verzeichnis Dienst
    Wenn       "B" versucht "A" direkt "Testnachricht 1" zu schreiben
    Dann       erhält "B" einen Responsecode 403

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2,homeserver,2)
  #@DistinctColumn(ApiName2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("practitioner"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1 | ApiName2 |

  @BP:N2O @Ctl:OrgAdmin @Ctl:Raum @Ctl:OrgOnly
    @TCID:TIM_11_AF_915 @PRIO:2 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 09.15 Einladung außerhalb einer Organisation - Einladung in Raum - HBA-User ohne Eintrag im Verzeichnisdienst versucht Organisations-User einzuladen
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN    | <ApiName1A> |
      | B | CLIENT       | <ApiName1B> |
      | C | PRACTITIONER | <ApiName2>  |
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "C" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "C" findet "B" im Healthcare-Service "HealthcareServiceName1"
    Wenn       "C" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Dann       "B" erhält eine Einladung von "C"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1" von "C"
    Und        "B" ist dem Raum "TIM Testraum 1" beigetreten

    @Shuffle(true)
  #@MaxSameColumnProperty(ApiName2,homeserver,2)
    @DistinctColumn(ApiName2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName2.hasTag("practitioner"))
  #@SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName2 |

  @BP:N2P_extern @Ctl:OrgAdmin @Ctl:Chat @Ctl:OrgOnly
    @TCID:TIM_11_AF_916 @PRIO:2 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.16 Einladung außerhalb einer Organisation - Einladung in Chat - Organisations-User ohne Eintrag im Verzeichnisdienst versucht HBA-User einzuladen
    Angenommen Es werden folgende Clients reserviert:
      | A | PRACTITIONER | <ApiName2> |
      | B | CLIENT       | <ApiName1> |
    Und        "A" hinterlegt seine MXID im Verzeichnis Dienst
    Wenn       "B" versucht "A" direkt "Testnachricht 1" zu schreiben
    Dann       erhält "B" einen Responsecode 403

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
  #@DistinctColumn(ApiName1)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1 | ApiName2 |

  @BP:N2O @Ctl:OrgAdmin @Ctl:Raum @Ctl:OrgOnly
    @TCID:TIM_11_AF_917 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 09.17 Einladung außerhalb einer Organisation - Einladung in Raum - Organisations-User ohne Eintrag im Verzeichnisdienst versucht Organisations-User einzuladen
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN | <ApiName1A> |
      | B | CLIENT    | <ApiName1B> |
      | C | CLIENT    | <ApiName2>  |
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "B"
    Und        "C" erstellt einen Chat-Raum "TIM Testraum 1"
    Wenn       "C" lädt "B" über den HealthcareService "HealthcareServiceName" in den Chat-Raum "TIM Testraum 1" ein
    Dann       "B" erhält eine Einladung von "C"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1" von "C"
    Und        "B" ist dem Raum "TIM Testraum 1" beigetreten

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2B,homeserver,2)
  #@DistinctColumn(ApiName2B)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1A | ApiName1B | ApiName2 |

  @BP:N2N_intern @@Ctl:NOVZD @Ctl:BasicTest @Ctl:OrgOnly
    @TCID:TIM_11_AF_918 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.18 Einladung außerhalb einer Organisation - Negativ Suche - Qualifizierte Suche auf dem Homeserver
    Angenommen Es werden folgende Clients reserviert:
      | A | CLIENT | <ApiName1> |
      | B | CLIENT | <ApiName2> |
    Dann       "A" findet TI-Messenger-Nutzer "B" bei der Suche im HomeServer nicht [Retry 10 - 3]

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,1)
  #@DistinctColumn(ApiName1)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))

    Beispiele:
      | ApiName1 | ApiName2 |