# language: de
@File:FeatureFile_15 @Ctl:AdditionalIOP @Ctl:GruppenchatGroß
@PRODUKT:TIM_FD @PRODUKT:TIM_Client
Funktionalität:  15. Gruppenchat mit 5 Teilnehmern
  Zentrales Konzept beim Chatten in Matrix sind die "Räume". Die folgenden Testfälle sollen das Konzept 'Gruppenchat'
  behandeln. Wenn ein Akteur mehrere Personen in einen "Raum" einlädt, erzeugt man einen Gruppenchat.

  Diese Testfälle funktionieren nur, wenn 5 verschiedene HomeServer Instanzen zu Verfügung stehen und sollen
  zukünftig für größere IOP Tests genutzt werden können.

  Inhalt
  TF 1 & 2 Gruppenchat unterschiedliche Organisationen (HBA)
  TF 3     Gruppenchat unterschiedliche Organisationen (OrgUser)

  @BP:P2P @Ctl:MsgForward
  @TCID:TIM_11_AF_1501 @PRIO:3 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 15.1 Events außerhalb einer Organisation - Gruppenchat mit 5 Teilnehmern - Test-Client "A" sendet eine Nachricht (HBA-User)
    Angenommen "A" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1>
    Und        "B" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName2>
    Und        "C" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName3>
    Und        "D" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName4>
    Und        "E" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName5>
    Und        "A", "B", "C", "D", "E" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet "B", "C", "D", "E" in FHIR
    Und        "A" lädt "B","C","D","E" in Chat-Raum "TIM Testraum 1" ein
    Und        "B", "C", "D", "E" erhalten eine Einladung von "A"
    Und        "B", "C", "D", "E" bestätigt eine Einladung von "A"
    Wenn       "A" sendet die Nachricht "Hello from the other site" an den Raum "TIM Testraum 1"
    Dann       "B", "C", "D", "E" empfangen eine Nachricht "Hello from the other site" von "A" im Raum "TIM Testraum 1"

  @Shuffle
  @DistinctProperty(homeserver)
  @MinimalTable(true)
  @Filter(ApiName1.hasTag("client"))
  @Filter(ApiName2.hasTag("client"))
  @Filter(ApiName3.hasTag("client"))
  @Filter(ApiName4.hasTag("client"))
  @Filter(ApiName5.hasTag("client"))
  @Filter(ApiName1.hasTag("practitioner"))
  @Filter(ApiName2.hasTag("practitioner"))
  @Filter(ApiName3.hasTag("practitioner"))
  @Filter(ApiName4.hasTag("practitioner"))
  @Filter(ApiName5.hasTag("practitioner"))

    Beispiele:
    | ApiName1 | ApiName2 | ApiName3 | ApiName4 | ApiName5 |

  @BP:P2P @Ctl:MsgBackward
  @TCID:TIM_11_AF_1502 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 15.2 Events außerhalb einer Organisation - Gruppenchat mit 5 Teilnehmern - Test-Client "E" sendet eine Nachricht (HBA-User)
    Angenommen "A" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1>
    Und        "B" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName2>
    Und        "C" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName3>
    Und        "D" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName4>
    Und        "E" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName5>
    Und        "A", "B", "C", "D", "E" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet "B", "C", "D", "E" in FHIR
    Und        "A" lädt "B","C","D","E" in Chat-Raum "TIM Testraum 1" ein
    Und        "B", "C", "D", "E" erhalten eine Einladung von "A"
    Und        "B", "C", "D", "E" bestätigt eine Einladung von "A"
    Wenn       "E" sendet die Nachricht "Hello from the other site" an den Raum "TIM Testraum 1"
    Dann       "A", "B", "C", "D" empfangen eine Nachricht "Hello from the other site" von "E" im Raum "TIM Testraum 1"

  @Shuffle
  @DistinctProperty(homeserver)
  @MinimalTable(true)
  @Filter(ApiName1.hasTag("client"))
  @Filter(ApiName2.hasTag("client"))
  @Filter(ApiName3.hasTag("client"))
  @Filter(ApiName4.hasTag("client"))
  @Filter(ApiName5.hasTag("client"))
  @Filter(ApiName1.hasTag("practitioner"))
  @Filter(ApiName2.hasTag("practitioner"))
  @Filter(ApiName3.hasTag("practitioner"))
  @Filter(ApiName4.hasTag("practitioner"))
  @Filter(ApiName5.hasTag("practitioner"))


    Beispiele:
    | ApiName1 | ApiName2 | ApiName3 | ApiName4 | ApiName5 |

  @BP:O2O @Ctl:OrgAdmin @Ctl:MsgForward
  @TCID:TIM_11_AF_1503 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 15.3 Events außerhalb einer Organisation - Gruppenchat mit 5 Teilnehmern - Test-Client "F" sendet eine Nachricht (Organisations-User)
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName2A>
    Und        "C" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName3A>
    Und        "D" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName4A>
    Und        "E" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName5A>
    Und        "F" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "G" reserviert sich einen Messenger-Client an Schnittstelle <ApiName2B>
    Und        "H" reserviert sich einen Messenger-Client an Schnittstelle <ApiName3B>
    Und        "I" reserviert sich einen Messenger-Client an Schnittstelle <ApiName4B>
    Und        "J" reserviert sich einen Messenger-Client an Schnittstelle <ApiName5B>
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "F"
    Und        "B" erstellt einen Healthcare-Service "HealthcareServiceName2" und setzen einen Endpunkt auf "G"
    Und        "C" erstellt einen Healthcare-Service "HealthcareServiceName3" und setzen einen Endpunkt auf "H"
    Und        "D" erstellt einen Healthcare-Service "HealthcareServiceName4" und setzen einen Endpunkt auf "I"
    Und        "E" erstellt einen Healthcare-Service "HealthcareServiceName5" und setzen einen Endpunkt auf "J"
    Und        "F" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "F" lädt "G" über den HealthcareService "HealthcareServiceName2" in den Chat-Raum "TIM Testraum 1" ein
    Und        "F" lädt "H" über den HealthcareService "HealthcareServiceName3" in den Chat-Raum "TIM Testraum 1" ein
    Und        "F" lädt "I" über den HealthcareService "HealthcareServiceName4" in den Chat-Raum "TIM Testraum 1" ein
    Und        "F" lädt "J" über den HealthcareService "HealthcareServiceName5" in den Chat-Raum "TIM Testraum 1" ein
    Und        "G", "H", "I", "J" erhalten eine Einladung von "F"
    Und        "G", "H", "I", "J" bestätigt eine Einladung von "F"
    Wenn       "F" sendet die Nachricht "Hello from the other site" an den Raum "TIM Testraum 1"
    Dann       "G", "H", "I", "J" empfangen eine Nachricht "Hello from the other site" von "F" im Raum "TIM Testraum 1"

  @Shuffle
  @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
  @Filter(ApiName2A.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
  @Filter(ApiName3A.properties["homeserver"].equals(ApiName3B.properties["homeserver"]))
  @Filter(ApiName4A.properties["homeserver"].equals(ApiName4B.properties["homeserver"]))
  @Filter(ApiName5A.properties["homeserver"].equals(ApiName5B.properties["homeserver"]))
  @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2A.properties["homeserver"]))
  @Filter(!ApiName1A.properties["homeserver"].equals(ApiName3A.properties["homeserver"]))
  @Filter(!ApiName1A.properties["homeserver"].equals(ApiName4A.properties["homeserver"]))
  @Filter(!ApiName1A.properties["homeserver"].equals(ApiName5A.properties["homeserver"]))
  @Filter(!ApiName2A.properties["homeserver"].equals(ApiName3A.properties["homeserver"]))
  @Filter(!ApiName2A.properties["homeserver"].equals(ApiName4A.properties["homeserver"]))
  @Filter(!ApiName2A.properties["homeserver"].equals(ApiName5A.properties["homeserver"]))
  @Filter(!ApiName3A.properties["homeserver"].equals(ApiName4A.properties["homeserver"]))
  @Filter(!ApiName3A.properties["homeserver"].equals(ApiName5A.properties["homeserver"]))
  @Filter(!ApiName4A.properties["homeserver"].equals(ApiName5A.properties["homeserver"]))
  @MinimalTable(true)
  #@DistinctColumn(ApiName1B)
  #@MaxSameColumnProperty(ApiName1B,homeserver,1)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName2A.hasTag("orgAdmin"))
  @Filter(ApiName3A.hasTag("orgAdmin"))
  @Filter(ApiName4A.hasTag("orgAdmin"))
  @Filter(ApiName5A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName2B.hasTag("client"))
  @Filter(ApiName3B.hasTag("client"))
  @Filter(ApiName4B.hasTag("client"))
  @Filter(ApiName5B.hasTag("client"))

    Beispiele:
    | ApiName1A | ApiName2A | ApiName3A | ApiName4A | ApiName5A | ApiName1B | ApiName2B | ApiName3B | ApiName4B | ApiName5B |