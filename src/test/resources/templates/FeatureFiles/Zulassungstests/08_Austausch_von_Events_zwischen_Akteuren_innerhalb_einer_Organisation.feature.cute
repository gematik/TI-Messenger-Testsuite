#  language: de
@File:FeatureFile_08 @Ctl:UseCase @Ctl:OneHomeServer
@PRODUKT:TIM_FD @PRODUKT:TIM_Client
@AF-ID:AF_10063
@AK-ID:ML-123670 @AK-ID:ML-123669 @AK-ID:ML-132591
@AF-ID:AF_10104
@AK-ID:ML-123896 @AK-ID:ML-129415 @AK-ID:ML-129414 @AK-ID:ML-132590
@AF-ID:AF_10064
@AK-ID:ML-123672 @AK-ID:ML-123891 @AK-ID:ML-132589 @AK-ID:ML-137902
@AF-ID:AF_10058
@AK-ID:ML-123612 @AK-ID:ML-132588
@AF-ID:AF_10059
@AK-ID:ML-123627 @AK-ID:ML-132586
@AK-ID:ML-123654
Funktionalität: 08. Austausch von Events zwischen Akteuren innerhalb einer Organisation

  AF_10063 - Austausch von Events zwischen Akteuren innerhalb einer Organisation
    ML-123670 - Chatnachricht wird verarbeitet
    ML-123669 - Auslösen einer Benachrichtigung
    ML-132591 - TI-M Rohdatenerfassung und -lieferung

  Zusätzlich werden in diesem Feature File folgende Anforderungen aus anderen Feature Files betrachtet,
  da sie Preconditions für den AF_10063 darstellen:

  AF_10104 - Einladung von Akteuren innerhalb einer Organisation
    ML-123896 - Matrix-Homeserver nach Akteuren durchsuchen
    ML-129415 - Messenger-Proxy prüft TI-Föderationszugehörigkeit
    ML-129414 - Akteure sind dem Chatraum beigetreten
    ML-132590 - TI-M Rohdatenerfassung und -lieferung

  AF_10064 - Föderationszugehörigkeit eines Messenger-Service prüfen
    ML-123672 - Föderationsliste vom VZD-FHIR-Directory abrufen
    ML-123891 - Matrix-Domain Teil der Föderationsliste & Aktualitätscheck
    ML-132589 - TI-M Rohdatenerfassung und -lieferung
    ML-137902 - Aktualität - Föderationsliste Messenger-Proxy

  AF_10058 Akteur (User-HBA) im Verzeichnisdienst hinzufügen
    ML-123612 - Akteur als Practitioner hinzufügen
    ML-132588 - TI-M Rohdatenerfassung und -lieferung

  AF_10059 - Organisationsressourcen im Verzeichnisdienst hinzufügen
    ML-123627 - Organisationsressourcen im VZD-FHIR-Directory hinzufügen
    ML-132586 - TI-M Rohdatenerfassung und -lieferung

    ML-123654 - Suche im VZD-FHIR-Directory

  In diesem Anwendungsfall erfolgt gleichzeitig eine Prüfung des Berechtigungskonzept.
  Zusätzlich werden in diesem Feature File Anforderungen aus Feature File 7 (AF_10104) betrachtet,
  da sie Preconditions für den AF_10063 darstellen und so an dieser Stelle getestst werden.

  Inhalt
  TF 1  -  3 HBA sendet Nachricht Chat/Raum (HBA an HBA)
  TF 4  &  5 HBA sendet Nachricht Chat/Raum (HBA an OrgUser)
  TF 6  &  7 OrgUser sendet Nachricht Chat/Raum (OrgUser an OrgUser)
  TF 8  &  9 OrgUser sendet Nachricht Chat/Raum (OrgUser an HBA)
  TF 10 - 13 Löschen einer Nachricht durch HBA/OrgUser in Chat/Raum
  TF 14 & 15 Nachricht an ausgeloggten User senden durch HBA/OrgUser
  TF 16 - 19 Attachment senden durch HBA/OrgUser
  TF 20 & 21 Eventaustausch auf dem HomeServer Chat/Raum

  @BP:P2P @Ctl:Chat @Ctl:MsgForward
  @TCID:TIM_11_AF_801 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.01 Events innerhalb einer Organisation - Chat - Test-Client "A" sendet und empfängt eine Nachricht
    Angenommen "A" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1B>
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" findet "B" in FHIR
    Wenn       "A" schreibt "B" direkt "Testnachricht 1"
    Und        "B" erhält eine Einladung von "A"
    Und        "B" bestätigt eine Einladung von "A"
    Dann       "B" empfängt eine Nachricht "Testnachricht 1" von "A"
    Wenn       "B" schreibt "A" direkt "Testnachricht 2"
    Dann       "A" empfängt eine Nachricht "Testnachricht 2" von "B"

  @Shuffle(true) #
  @DistinctColumn(ApiName1A) #
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("client"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1A.hasTag("practitioner"))
  @Filter(ApiName1B.hasTag("practitioner"))

    Beispiele:
    | ApiName1A | ApiName1B |

  @BP:P2P @Ctl:Raum @Ctl:MsgForward
  @TCID:TIM_11_AF_802 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.02 Events innerhalb einer Organisation - Raum - Test-Client "A" sendet eine Nachricht
    Angenommen "A" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1B>
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet "B" in FHIR
    Und        "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Und        "B" erhält eine Einladung in Raum "TIM Testraum 1"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1"
    Wenn       "A" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Dann       "B" empfängt eine Nachricht "Testnachricht 1" von "A" im Raum "TIM Testraum 1"

  @Shuffle(true) #
  @DistinctColumn(ApiName1A) #
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("client"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1A.hasTag("practitioner"))
  @Filter(ApiName1B.hasTag("practitioner"))

    Beispiele:
    | ApiName1A | ApiName1B |

  @BP:P2P @Ctl:Raum @Ctl:MsgBackward
  @TCID:TIM_11_AF_803 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.03 Events innerhalb einer Organisation - Raum - Test-Client "B" sendet eine Nachricht
    Angenommen "A" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1B>
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet "B" in FHIR
    Und        "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Und        "B" erhält eine Einladung in Raum "TIM Testraum 1"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1"
    Wenn       "B" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Dann       "A" empfängt eine Nachricht "Testnachricht 1" von "B" im Raum "TIM Testraum 1"

  @Shuffle(true) #
  @MaxSameColumnProperty(ApiName1A,homeserver,1) #
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("client"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1A.hasTag("practitioner"))
  @Filter(ApiName1B.hasTag("practitioner"))

    Beispiele:
    | ApiName1A | ApiName1B |

  @BP:P2O @Ctl:OrgAdmin @Ctl:Chat @Ctl:MsgForward
  @TCID:TIM_11_AF_804 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.04 Events innerhalb einer Organisation - Chat - HBA-User sendet Organisations-User eine Nachricht
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "C" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1C>
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "C" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Wenn       "C" schreibt "B" über den Healthcare-Service "HealthcareServiceName1" direkt "Testnachricht 1"
    Und        "B" erhält eine Einladung von "C"
    Und        "B" bestätigt eine Einladung von "C"
    Dann       "B" empfängt eine Nachricht "Testnachricht 1" von "C"
    Wenn       "B" schreibt "C" direkt "Testnachricht 2"
    Dann       "C" empfängt eine Nachricht "Testnachricht 2" von "B"

  @Shuffle(true) #
  @DistinctColumn(ApiName1C) #
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1C.hasTag("client"))
  @Filter(ApiName1C.hasTag("practitioner"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName1C |

  @BP:P2O @Ctl:OrgAdmin @Ctl:Raum @Ctl:MsgForward
  @TCID:TIM_11_AF_805 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.05 Events innerhalb einer Organisation - Raum - HBA-User sendet Organisations-User eine Nachricht
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "C" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1C>
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "C" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "C" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "C" lädt "B" über den HealthcareService "HealthcareServiceName1" in den Chat-Raum "TIM Testraum 1" ein
    Und        "B" erhält eine Einladung in Raum "TIM Testraum 1"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1"
    Wenn       "C" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Dann       "B" empfängt eine Nachricht "Testnachricht 1" von "C" im Raum "TIM Testraum 1"

  @Shuffle(true) #
  @MaxSameColumnProperty(ApiName1C,homeserver,1) #
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1C.hasTag("client"))
  @Filter(ApiName1C.hasTag("practitioner"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName1C |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Chat @Ctl:MsgForward
  @TCID:TIM_11_AF_806 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.06 Events innerhalb einer Organisation - Chat - Organisations-User sendet Organisations-User eine Nachricht
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "C" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1C>
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName2" und setzen einen Endpunkt auf "C"
    Wenn       "C" schreibt "B" über den Healthcare-Service "HealthcareServiceName1" direkt "Testnachricht 1"
    Und        "B" erhält eine Einladung von "C"
    Und        "B" bestätigt eine Einladung von "C"
    Dann       "B" empfängt eine Nachricht "Testnachricht 1" von "C"
    Wenn       "B" schreibt "C" direkt "Testnachricht 2"
    Dann       "C" empfängt eine Nachricht "Testnachricht 2" von "B"


  @Shuffle(true) #
  @DistinctColumn(ApiName1C) #
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1C.hasTag("client"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName1C |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Raum @Ctl:MsgForward
  @TCID:TIM_11_AF_807 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.07 Events innerhalb einer Organisation - Raum - Organisations-User sendet Organisations-User eine Nachricht
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "C" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1C>
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName2" und setzen einen Endpunkt auf "C"
    Und        "C" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "C" lädt "B" über den HealthcareService "HealthcareServiceName1" in den Chat-Raum "TIM Testraum 1" ein
    Und        "B" erhält eine Einladung in Raum "TIM Testraum 1"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1"
    Wenn       "C" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Dann       "B" empfängt eine Nachricht "Testnachricht 1" von "C" im Raum "TIM Testraum 1"

  @Shuffle(true) #
  @DistinctColumn(ApiName1C) #
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1C.hasTag("client"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName1C |

  @BP:O2P_intern @Ctl:OrgAdmin @Ctl:Chat @Ctl:MsgForward
  @TCID:TIM_11_AF_808 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.08 Events innerhalb einer Organisation - Chat - Organisations-User sendet HBA-User eine Nachricht
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "C" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1C>
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "C" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "B" findet "C" in FHIR
    Wenn       "B" schreibt "C" direkt "Testnachricht 1"
    Und        "C" erhält eine Einladung von "B"
    Und        "C" bestätigt eine Einladung von "B"
    Dann       "C" empfängt eine Nachricht "Testnachricht 1" von "B"

  @Shuffle(true) #
  @MaxSameColumnProperty(ApiName1B,homeserver,1) #
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1C.hasTag("client"))
  @Filter(ApiName1C.hasTag("practitioner"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName1C |

  @BP:O2P_intern @Ctl:OrgAdmin @Ctl:Raum @Ctl:MsgForward
  @TCID:TIM_11_AF_809 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.09 Events innerhalb einer Organisation - Raum - Organisations-User sendet HBA-User eine Nachricht
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "C" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1C>
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "C" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "B" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "B" findet "C" in FHIR
    Und        "B" lädt "C" in Chat-Raum "TIM Testraum 1" ein
    Und        "C" erhält eine Einladung in Raum "TIM Testraum 1"
    Und        "C" bestätigt eine Einladung in Raum "TIM Testraum 1"
    Wenn       "B" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Dann       "C" empfängt eine Nachricht "Testnachricht 1" von "B" im Raum "TIM Testraum 1"

  @Shuffle(true)
  @DistinctColumn(ApiName1B)
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1C.hasTag("client"))
  @Filter(ApiName1C.hasTag("practitioner"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName1C |

  @BP:P2P @Ctl:Chat @Ctl:MsgForward @Ctl:MsgDelete
  @TCID:TIM_11_AF_810 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.10 Events innerhalb einer Organisation - Chat - HBA-User "B" löscht eine Nachricht
    Angenommen "A" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1B>
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" findet "B" in FHIR
    Und        "A" schreibt "B" direkt "Testnachricht 1"
    Und        "B" erhält eine Einladung von "A"
    Und        "B" bestätigt eine Einladung von "A"
    Und        "B" empfängt eine Nachricht "Testnachricht 1" von "A"
    Und        "B" schreibt "A" direkt "Testnachricht 2"
    Und        "A" empfängt eine Nachricht "Testnachricht 2" von "B"
    Wenn       "B" löscht seine Nachricht "Testnachricht 2" im Chat mit "A"
    Dann       "A" kann die Nachricht "Testnachricht 2" von "B" im Chat mit "B" nicht mehr sehen [Retry 10 - 3]
    Und        "B" kann die Nachricht "Testnachricht 2" von "B" im Chat mit "A" nicht mehr sehen [Retry 5 - 2]

  @Shuffle(true) #
  @DistinctColumn(ApiName1B) #
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("client"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1A.hasTag("practitioner"))
  @Filter(ApiName1B.hasTag("practitioner"))

    Beispiele:
    | ApiName1A | ApiName1B |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Chat @Ctl:MsgForward @Ctl:MsgDelete
  @TCID:TIM_11_AF_811 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.11 Events innerhalb einer Organisation - Chat - Organisations-User "B" löscht eine Nachricht
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "C" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1C>
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "B"
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "C"
    Und        "B" schreibt "C" über den Healthcare-Service "HealthcareServiceName1" direkt "Testnachricht 1"
    Und        "C" erhält eine Einladung von "B"
    Und        "C" bestätigt eine Einladung von "B"
    Und        "C" empfängt eine Nachricht "Testnachricht 1" von "B"
    Und        "C" schreibt "B" direkt "Testnachricht 2"
    Und        "B" empfängt eine Nachricht "Testnachricht 2" von "C"
    Wenn       "C" löscht seine Nachricht "Testnachricht 2" im Chat mit "B"
    Dann       "B" kann die Nachricht "Testnachricht 2" von "C" im Chat mit "C" nicht mehr sehen [Retry 10 - 3]
    Und        "C" kann die Nachricht "Testnachricht 2" von "C" im Chat mit "B" nicht mehr sehen [Retry 5 - 2]

  @Shuffle(true) #
  @MaxSameColumnProperty(ApiName1C,homeserver,1) #
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1C.hasTag("client"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName1C |

  @BP:P2P @Ctl:Raum @Ctl:MsgForward @Ctl:MsgDelete
  @TCID:TIM_11_AF_812 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.12 Events innerhalb einer Organisation - Raum - HBA-User "A" löscht eine Nachricht
    Angenommen "A" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1B>
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet "B" in FHIR
    Und        "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Und        "B" erhält eine Einladung in Raum "TIM Testraum 1"
    Und        "B" bestätigt eine Einladung von "A"
    Und        "A" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Und        "B" empfängt eine Nachricht "Testnachricht 1" von "A" im Raum "TIM Testraum 1"
    Wenn       "A" löscht seine Nachricht "Testnachricht 1" im Raum "TIM Testraum 1"
    Dann       "B" kann die Nachricht "Testnachricht 1" von "A" im Raum "TIM Testraum 1" nicht mehr sehen [Retry 10 - 3]
    Und        "A" kann die Nachricht "Testnachricht 1" von "A" im Raum "TIM Testraum 1" nicht mehr sehen [Retry 5 - 2]

  @Shuffle(true) #
  @MaxSameColumnProperty(ApiName1A,homeserver,1) #
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("client"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1A.hasTag("practitioner"))
  @Filter(ApiName1B.hasTag("practitioner"))

    Beispiele:
    | ApiName1A | ApiName1B |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Raum @Ctl:MsgForward @Ctl:MsgDelete
  @TCID:TIM_11_AF_813 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.13 Events innerhalb einer Organisation - Raum - Organisations-User "A" löscht eine Nachricht
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "C" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1C>
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "B"
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "C"
    Und        "B" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "B" lädt "C" über den HealthcareService "HealthcareServiceName1" in den Chat-Raum "TIM Testraum 1" ein
    Und        "C" erhält eine Einladung in Raum "TIM Testraum 1"
    Und        "C" bestätigt eine Einladung von "B"
    Und        "B" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Und        "C" empfängt eine Nachricht "Testnachricht 1" von "B" im Raum "TIM Testraum 1"
    Wenn       "B" löscht seine Nachricht "Testnachricht 1" im Raum "TIM Testraum 1"
    Dann       "C" kann die Nachricht "Testnachricht 1" von "B" im Raum "TIM Testraum 1" nicht mehr sehen [Retry 10 - 3]
    Und        "B" kann die Nachricht "Testnachricht 1" von "B" im Raum "TIM Testraum 1" nicht mehr sehen [Retry 5 - 2]

  @Shuffle(true) #
  @DistinctColumn(ApiName1B) #
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1C.hasTag("client"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName1C |

  @BP:P2P @Ctl:Raum @Ctl:MsgForward @Ctl:MsgLogout
  @TCID:TIM_11_AF_814 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.14 Events innerhalb einer Organisation - Raum - HBA-User "A" sendet eine Nachricht an ausgeloggten Test-Client "B"
    Angenommen "A" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1B>
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "B" loggt sich im TI-Messenger aus
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet "B" in FHIR
    Und        "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Und        "A" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Wenn       "B" loggt sich im TI-Messenger ein
    Dann       "B" erhält eine Einladung in Raum "TIM Testraum 1"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1"
    Und        "B" empfängt eine Nachricht "Testnachricht 1" von "A" im Raum "TIM Testraum 1"

  @Shuffle(true) #
  @MaxSameColumnProperty(ApiName1B,homeserver,2) #
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("client"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1A.hasTag("practitioner"))
  @Filter(ApiName1B.hasTag("practitioner"))

    Beispiele:
    | ApiName1A | ApiName1B |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Raum @Ctl:MsgForward @Ctl:MsgLogout
  @TCID:TIM_11_AF_815 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.15 Events innerhalb einer Organisation - Raum - Organisations-User "A" sendet eine Nachricht an ausgeloggten Test-Client "B"
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "C" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1C>
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "B"
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "C"
    Und        "C" loggt sich im TI-Messenger aus
    Und        "B" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "B" lädt "C" über den HealthcareService "HealthcareServiceName1" in den Chat-Raum "TIM Testraum 1" ein
    Und        "B" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Wenn       "C" loggt sich im TI-Messenger ein
    Dann       "C" erhält eine Einladung in Raum "TIM Testraum 1"
    Und        "C" bestätigt eine Einladung in Raum "TIM Testraum 1"
    Und        "C" empfängt eine Nachricht "Testnachricht 1" von "B" im Raum "TIM Testraum 1"

  @Shuffle(true) #
  @MaxSameColumnProperty(ApiName1C,homeserver,2) #
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @DistinctColumn(ApiName1C)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1C.hasTag("client"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName1C |

  @BP:P2P @Ctl:Raum @Ctl:MsgForward @Ctl:Attachment
  @TCID:TIM_11_AF_816 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.16 Events innerhalb einer Organisation - Raum - HBA-User "A" sendet ein Attachment
    Angenommen "A" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1B>
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet "B" in FHIR
    Und        "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Und        "B" erhält eine Einladung in Raum "TIM Testraum 1"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1"
    Wenn       "A" sendet ein Attachment "datei.txt" an den Raum "TIM Testraum 1"
    Dann       "B" empfängt das Attachment "datei.txt" von "A" im Raum "TIM Testraum 1"

  @Shuffle(true)
  @DistinctColumn(ApiName1A)
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("client"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1A.hasTag("practitioner"))
  @Filter(ApiName1B.hasTag("practitioner"))

    Beispiele:
    | ApiName1A | ApiName1B |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Raum @Ctl:MsgForward @Ctl:Attachment
  @TCID:TIM_11_AF_817 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.17 Events innerhalb einer Organisation - Raum - Organisations-User "A" sendet ein Attachment
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "C" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1C>
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "B"
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "C"
    Und        "B" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "B" lädt "C" über den HealthcareService "HealthcareServiceName1" in den Chat-Raum "TIM Testraum 1" ein
    Und        "C" erhält eine Einladung in Raum "TIM Testraum 1"
    Und        "C" bestätigt eine Einladung in Raum "TIM Testraum 1"
    Wenn       "B" sendet ein Attachment "datei.txt" an den Raum "TIM Testraum 1"
    Dann       "C" empfängt das Attachment "datei.txt" von "B" im Raum "TIM Testraum 1"

  @Shuffle(true) #
  @MaxSameColumnProperty(ApiName1B,homeserver,1) #
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1C.hasTag("client"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName1C |

  @BP:P2P @Ctl:Raum @Ctl:MsgBackward @Ctl:Attachment
  @TCID:TIM_11_AF_818 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.18 Events innerhalb einer Organisation - Raum - HBA-User "B" sendet ein Attachment
    Angenommen "A" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1B>
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet "B" in FHIR
    Und        "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Und        "B" erhält eine Einladung in Raum "TIM Testraum 1"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1"
    Wenn       "B" sendet ein Attachment "bild.jpg" an den Raum "TIM Testraum 1"
    Dann       "A" empfängt das Attachment "bild.jpg" von "B" im Raum "TIM Testraum 1"

  @Shuffle(true) #
  @MaxSameColumnProperty(ApiName1B,homeserver,1) #
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("client"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1A.hasTag("practitioner"))
  @Filter(ApiName1B.hasTag("practitioner"))

    Beispiele:
    | ApiName1A | ApiName1B |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Raum @Ctl:MsgBackward @Ctl:Attachment
  @TCID:TIM_11_AF_819 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.19 Events innerhalb einer Organisation - Raum - Organisations-User "B" sendet ein Attachment
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "C" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1C>
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "B"
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "C"
    Und        "B" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "B" lädt "C" über den HealthcareService "HealthcareServiceName1" in den Chat-Raum "TIM Testraum 1" ein
    Und        "C" erhält eine Einladung in Raum "TIM Testraum 1"
    Und        "C" bestätigt eine Einladung in Raum "TIM Testraum 1"
    Wenn       "C" sendet ein Attachment "bild.jpg" an den Raum "TIM Testraum 1"
    Dann       "B" empfängt das Attachment "bild.jpg" von "C" im Raum "TIM Testraum 1"

  @Shuffle(true)
  @DistinctColumn(ApiName1C)
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1C.hasTag("client"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName1C |

  @BP:N2N @Ctl:Chat @Ctl:MsgForward @@Ctl:NOVZD
  @TCID:TIM_11_AF_820 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.20 Events innerhalb einer Organisation - Chat - Eventaustausch auf dem HomeServer
    Angenommen "A" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "A" findet TI-Messenger-Nutzer "B" bei der Suche im HomeServer
    Wenn       "A" schreibt "B" direkt "Testnachricht 1"
    Und        "B" erhält eine Einladung von "A"
    Und        "B" bestätigt eine Einladung von "A"
    Dann       "B" empfängt eine Nachricht "Testnachricht 1" von "A"
    Wenn       "B" schreibt "A" direkt "Testnachricht 2"
    Dann       "A" empfängt eine Nachricht "Testnachricht 2" von "B"

  @Shuffle(true)
  @DistinctColumn(ApiName1A)
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("client"))
  @Filter(ApiName1B.hasTag("client"))

    Beispiele:
    | ApiName1A | ApiName1B |

  @BP:N2N @Ctl:Raum @Ctl:MsgForward @@Ctl:NOVZD
  @TCID:TIM_11_AF_821 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 08.21 Events innerhalb einer Organisation - Raum - Eventaustausch auf dem HomeServer
    Angenommen "A" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet TI-Messenger-Nutzer "B" bei der Suche im HomeServer
    Und        "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Und        "B" erhält eine Einladung in Raum "TIM Testraum 1"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1"
    Wenn       "A" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Dann       "B" empfängt eine Nachricht "Testnachricht 1" von "A" im Raum "TIM Testraum 1"
    Wenn       "B" sendet die Nachricht "Testnachricht 2" an den Raum "TIM Testraum 1"
    Dann       "A" empfängt eine Nachricht "Testnachricht 2" von "B" im Raum "TIM Testraum 1"

  @Shuffle(true)
  @DistinctColumn(ApiName1A)
  @EqualProperty(homeserver)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("client"))
  @Filter(ApiName1B.hasTag("client"))

    Beispiele:
    | ApiName1A | ApiName1B |