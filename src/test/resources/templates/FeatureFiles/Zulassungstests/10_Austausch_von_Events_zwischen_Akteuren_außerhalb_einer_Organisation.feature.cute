# language: de
@File:FeatureFile_10 @Ctl:UseCase
@PRODUKT:TIM_FD @PRODUKT:TIM_Client
@AF-ID:AF_10062-01
@AK-ID:ML-123665 @AK-ID:ML-123666 @AK-ID:ML-123667 @AK-ID:ML-123668 @AK-ID:ML-132593
@AF-ID:AF_10061-01
@AK-ID:ML-123654 @AK-ID:ML-123663 @AK-ID:ML-132864 @AK-ID:ML-132592
@AF-ID:AF_10064-01
@AK-ID:ML-123672 @AK-ID:ML-123891 @AK-ID:ML-132589 @AK-ID:ML-137902
@AF-ID:AF_10058-01
@AK-ID:ML-123612 @AK-ID:ML-132588
@AF-ID:AF_10059-01
@AK-ID:ML-123627 @AK-ID:ML-132586
@AF-ID:AF_10036
Funktionalität: 10. Austausch von Events zwischen Akteuren außerhalb einer Organisation

  AF_10062-01 - Austausch von Events zwischen Akteuren außerhalb einer Organisation
    ML-123665 - Messenger-Proxy des Senders prüft Domain des Empfängers
    ML-123666 - Messenger-Proxy des Empfängers prüft Domain des Senders
    ML-123667 - Auslösen einer Notifikation
    ML-123668 - Nachricht wird angezeigt
    ML-132593 - TI-M Rohdatenerfassung und -lieferung

  AF_10061-01 - Einladung von Akteuren außerhalb einer Organisation
    ML-123654 - Suche im VZD-FHIR-Directory
    ML-123663 - Akteure sind dem Chatraum beigetreten
    ML-132864 - Berechtigungsprüfung aller Stufen
    ML-132592 - TI-M Rohdatenerfassung und -lieferung

  AF_10064-01 - Föderationszugehörigkeit eines Messenger-Service prüfen
    ML-123672 - Föderationsliste vom VZD-FHIR-Directory abrufen
    ML-123891 - Matrix-Domain Teil der Föderationsliste & Aktualitätscheck
    ML-132589 - TI-M Rohdatenerfassung und -lieferung
    ML-137902 - Aktualität - Föderationsliste Messenger-Proxy

  AF_10058-01 - Akteur (User-HBA) im Verzeichnisdienst hinzufügen
    ML-123612 - Akteur als Practitioner hinzufügen
    ML-132588 - TI-M Rohdatenerfassung und -lieferung

  AF_10059-01 - Organisationsressourcen im Verzeichnisdienst hinzufügen
    ML-123627 - Organisationsressourcen im VZD-FHIR-Directory hinzufügen
    ML-132586 - TI-M Rohdatenerfassung und -lieferung

  In diesem Anwendungsfall erfolgt gleichzeitig eine Prüfung des Berechtigungskonzept.
  Zusätzlich werden in diesem Feature File Anforderungen aus Feature File 9 (AF_10061) betrachtet,
  da sie Preconditions für den AF_10062 darstellen und so an dieser Stelle getestst werden.

  Inhalt
  TF 1  -  3 HBA sendet Nachricht Chat/Raum (HBA an HBA)
  TF 4  &  5 HBA sendet Nachricht Chat/Raum (HBA an OrgUser)
  TF 6  &  7 OrgUser sendet Nachricht Chat/Raum (OrgUser an OrgUser)
  TF 8  &  9 OrgUser sendet Nachricht Chat/Raum (OrgUser an HBA) (Negativ)
  TF 10 - 13 Löschen einer Nachricht durch HBA/OrgUser in Chat/Raum
  TF 14 & 15 Nachricht an ausgeloggten User senden durch HBA/OrgUser
  TF 16 - 19 Attachment senden durch HBA/OrgUser
  TF 20 & 21 User verlässt den Chat/Raum (HBA an HBA)

  # TODO Bei mehreren Anbietern MaxSameColumnProperty & Shuffle anschalten

  @BP:P2P @Ctl:Chat @Ctl:MsgForward
  @TCID:TIM_11_AF_1001 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 10.01 Events außerhalb einer Organisation - Chat - Test-Client "A" sendet und empfängt eine Nachricht
    Angenommen Es werden folgende Clients reserviert:
      | A | PRACTITIONER | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" findet "B" in FHIR
    Wenn       "A" schreibt "B" direkt "Testnachricht 1"
    Und        "B" erhält eine Einladung von "A"
    Und        "B" bestätigt eine Einladung von "A"
    Dann       "B" empfängt eine Nachricht "Testnachricht 1" von "A"
    Wenn       "B" schreibt "A" direkt "Testnachricht 2"
    Dann       "A" empfängt eine Nachricht "Testnachricht 2" von "B"

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("practitioner"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1 | ApiName2 |

  @BP:P2P @Ctl:Raum @Ctl:MsgForward
  @TCID:TIM_11_AF_1002 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 10.02 Events außerhalb einer Organisation - Raum - Test-Client "A" sendet eine Nachricht
    Angenommen Es werden folgende Clients reserviert:
      | A | PRACTITIONER | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet "B" in FHIR
    Und        "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Und        "B" erhält eine Einladung in Raum "TIM Testraum 1" von "A"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1" von "A"
    Wenn       "A" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Dann       "B" empfängt eine Nachricht "Testnachricht 1" von "A" im Raum "TIM Testraum 1"

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("practitioner"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1 | ApiName2 |

  @BP:P2P @Ctl:Raum @Ctl:MsgBackward
  @TCID:TIM_11_AF_1003 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 10.03 Events außerhalb einer Organisation - Raum - Test-Client "B" sendet eine Nachricht
    Angenommen Es werden folgende Clients reserviert:
      | A | PRACTITIONER | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet "B" in FHIR
    Und        "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Und        "B" erhält eine Einladung in Raum "TIM Testraum 1" von "A"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1" von "A"
    Wenn       "B" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Dann       "A" empfängt eine Nachricht "Testnachricht 1" von "B" im Raum "TIM Testraum 1"

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("practitioner"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1 | ApiName2 |

  @BP:P2O @Ctl:OrgAdmin @Ctl:Chat @Ctl:MsgForward
  @TCID:TIM_11_AF_1004 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 10.04 Events außerhalb einer Organisation - Chat - HBA-User sendet Organisations-User eine Nachricht
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN    | <ApiName1A> |
      | B | CLIENT       | <ApiName1B> |
      | C | PRACTITIONER | <ApiName2>  |
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "C" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Wenn       "C" schreibt "B" über den Healthcare-Service "HealthcareServiceName1" direkt "Testnachricht 1"
    Und        "B" erhält eine Einladung von "C"
    Und        "B" bestätigt eine Einladung von "C"
    Dann       "B" empfängt eine Nachricht "Testnachricht 1" von "C"
    Wenn       "B" schreibt "C" direkt "Testnachricht 2"
    Dann       "C" empfängt eine Nachricht "Testnachricht 2" von "B"


  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(!ApiName1B.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName2 |

  @BP:P2O @Ctl:OrgAdmin @Ctl:Raum @Ctl:MsgForward
  @TCID:TIM_11_AF_1005 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 10.05 Events außerhalb einer Organisation - Raum - HBA-User sendet Organisations-User eine Nachricht
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN    | <ApiName1A> |
      | B | CLIENT       | <ApiName1B> |
      | C | PRACTITIONER | <ApiName2>  |
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "C" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "C" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "C" lädt "B" über den HealthcareService "HealthcareServiceName1" in den Chat-Raum "TIM Testraum 1" ein
    Und        "B" erhält eine Einladung in Raum "TIM Testraum 1" von "C"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1" von "C"
    Wenn       "C" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Dann       "B" empfängt eine Nachricht "Testnachricht 1" von "C" im Raum "TIM Testraum 1"

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(!ApiName1B.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName2 |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Chat @Ctl:MsgForward
    @TCID:TIM_11_AF_1006 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 10.06 Events außerhalb einer Organisation - Chat - Organisations-User sendet Organisations-User eine Nachricht
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN | <ApiName1A> |
      | B | CLIENT    | <ApiName1B> |
      | C | ORG_ADMIN | <ApiName2A> |
      | D | CLIENT    | <ApiName2B> |
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "C" erstellt einen Healthcare-Service "HealthcareServiceName2" und setzen einen Endpunkt auf "D"
    Wenn       "B" schreibt "D" über den Healthcare-Service "HealthcareServiceName2" direkt "Testnachricht 1"
    Und        "D" erhält eine Einladung von "B"
    Und        "D" bestätigt eine Einladung von "B"
    Dann       "D" empfängt eine Nachricht "Testnachricht 1" von "B"
    Wenn       "D" schreibt "B" direkt "Testnachricht 2"
    Dann       "B" empfängt eine Nachricht "Testnachricht 2" von "D"

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1B,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(ApiName2A.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
    @Filter(!ApiName1B.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName2A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2B.hasTag("client"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2B.hasTag("prefIOP"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName2A | ApiName2B |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Raum @Ctl:MsgForward
  @TCID:TIM_11_AF_1007 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 10.07 Events außerhalb einer Organisation - Raum - Organisations-User sendet Organisations-User eine Nachricht
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN | <ApiName1A> |
      | B | CLIENT    | <ApiName1B> |
      | C | ORG_ADMIN | <ApiName2A> |
      | D | CLIENT    | <ApiName2B> |
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "C" erstellt einen Healthcare-Service "HealthcareServiceName2" und setzen einen Endpunkt auf "D"
    Und        "B" findet "D" im Healthcare-Service "HealthcareServiceName2"
    Und        "B" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "B" lädt "D" in Chat-Raum "TIM Testraum 1" ein
    Und        "D" erhält eine Einladung in Raum "TIM Testraum 1" von "B"
    Und        "D" bestätigt eine Einladung in Raum "TIM Testraum 1" von "B"
    Wenn       "B" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Dann       "D" empfängt eine Nachricht "Testnachricht 1" von "B" im Raum "TIM Testraum 1"

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1B,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(ApiName2A.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
    @Filter(!ApiName1B.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName2A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2B.hasTag("client"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2B.hasTag("prefIOP"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName2A | ApiName2B |

  @BP:O2P_extern @Ctl:OrgAdmin @Ctl:Chat @Ctl:Forbidden
  @TCID:TIM_11_AF_1008 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 10.08 Events außerhalb einer Organisation - Chat - Organisations-User sendet HBA-User eine Nachricht
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN    | <ApiName1A> |
      | B | CLIENT       | <ApiName1B> |
      | C | PRACTITIONER | <ApiName2>  |
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "C" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "B" findet "C" in FHIR
    Wenn       "B" versucht "C" direkt "Testnachricht 1" zu schreiben
    Dann       erhält "B" einen Responsecode 403
    Und        "C" erhält KEINE Einladung von "B" [Retry 10 - 3]

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1B,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(!ApiName1B.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName2 |

  @BP:O2P @Ctl:OrgAdmin @Ctl:Raum @Ctl:Forbidden @Ctl:BasicTest
  @TCID:TIM_11_AF_1009 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 10.09 Events außerhalb einer Organisation - Raum - Organisations-User sendet HBA-User eine Nachricht
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN    | <ApiName1A> |
      | B | CLIENT       | <ApiName1B> |
      | C | PRACTITIONER | <ApiName2>  |
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "C" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "B" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "B" findet "C" in FHIR
    Wenn       "B" versucht "C" in Chat-Raum "TIM Testraum 1" einzuladen
    Dann       erhält "B" einen Responsecode 403
    Und        "C" erhält KEINE Einladung von "B" für den Raum "TIM Testraum 1" [Retry 10 - 3]

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1B,homeserver,2)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(!ApiName1B.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName2 |

  @BP:P2P @Ctl:Chat @Ctl:MsgForward @Ctl:MsgDelete @Ctl:BasicTest
  @TCID:TIM_11_AF_1010 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 10.10 Events außerhalb einer Organisation - Chat - HBA-User "B" löscht eine Nachricht
    Angenommen Es werden folgende Clients reserviert:
      | A | PRACTITIONER | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" findet "B" in FHIR
    Und        "A" schreibt "B" direkt "Testnachricht 1"
    Und        "B" erhält eine Einladung von "A"
    Und        "B" bestätigt eine Einladung von "A"
    Und        "B" empfängt eine Nachricht "Testnachricht 1" von "A"
    Und        "B" schreibt "A" direkt "Testnachricht 2"
    Und        "A" empfängt eine Nachricht "Testnachricht 2" von "B"
    Wenn       "B" löscht seine Nachricht "Testnachricht 2" im Chat mit "A"
    Dann       "A" kann die Nachricht "Testnachricht 2" von "B" im Chat mit "B" nicht mehr sehen [Retry 10 - 3]
    Und        "B" kann die Nachricht "Testnachricht 2" von "B" im Chat mit "A" nicht mehr sehen [Retry 5 - 2]

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("practitioner"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1 | ApiName2 |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Chat @Ctl:MsgForward @Ctl:MsgDelete
  @TCID:TIM_11_AF_1011 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 10.11 Events außerhalb einer Organisation - Chat - Organisations-User "D" löscht eine Nachricht
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN | <ApiName1A> |
      | B | ORG_ADMIN | <ApiName2A> |
      | C | CLIENT    | <ApiName1B> |
      | D | CLIENT    | <ApiName2B> |
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "C"
    Und        "B" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "D"
    Und        "C" schreibt "D" über den Healthcare-Service "HealthcareServiceName1" direkt "Testnachricht 1"
    Und        "D" erhält eine Einladung von "C"
    Und        "D" bestätigt eine Einladung von "C"
    Und        "D" empfängt eine Nachricht "Testnachricht 1" von "C"
    Und        "D" schreibt "C" direkt "Testnachricht 2"
    Und        "C" empfängt eine Nachricht "Testnachricht 2" von "D"
    Wenn       "D" löscht seine Nachricht "Testnachricht 2" im Chat mit "C"
    Dann       "C" kann die Nachricht "Testnachricht 2" von "D" im Chat mit "D" nicht mehr sehen [Retry 10 - 3]
    Und        "D" kann die Nachricht "Testnachricht 2" von "D" im Chat mit "C" nicht mehr sehen [Retry 5 - 2]

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2B,homeserver,2)
  #@DistinctColumn(ApiName2B)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(ApiName2A.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
    @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2A.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName2A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2B.hasTag("client"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2B.hasTag("prefIOP"))

    Beispiele:
    | ApiName1A | ApiName2A | ApiName1B | ApiName2B |

  @BP:P2P @Ctl:Raum @Ctl:MsgForward @Ctl:MsgDelete @Ctl:BasicTest
  @TCID:TIM_11_AF_1012 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 10.12 Events außerhalb einer Organisation - Raum - HBA-User "A" löscht eine Nachricht
    Angenommen Es werden folgende Clients reserviert:
      | A | PRACTITIONER | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet "B" in FHIR
    Und        "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Und        "B" erhält eine Einladung in Raum "TIM Testraum 1" von "A"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1" von "A"
    Und        "A" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Und        "B" empfängt eine Nachricht "Testnachricht 1" von "A" im Raum "TIM Testraum 1"
    Wenn       "A" löscht seine Nachricht "Testnachricht 1" im Raum "TIM Testraum 1"
    Dann       "B" kann die Nachricht "Testnachricht 1" von "A" im Raum "TIM Testraum 1" nicht mehr sehen [Retry 10 - 3]
    Und        "A" kann die Nachricht "Testnachricht 1" von "A" im Raum "TIM Testraum 1" nicht mehr sehen [Retry 5 - 2]

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("practitioner"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1 | ApiName2 |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Raum @Ctl:MsgForward @Ctl:MsgDelete
  @TCID:TIM_11_AF_1013 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 10.13 Events außerhalb einer Organisation - Raum - Organisations-User "C" löscht eine Nachricht
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN | <ApiName1A> |
      | B | ORG_ADMIN | <ApiName2A> |
      | C | CLIENT    | <ApiName1B> |
      | D | CLIENT    | <ApiName2B> |
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "C"
    Und        "B" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "D"
    Und        "C" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "C" lädt "D" über den HealthcareService "HealthcareServiceName1" in den Chat-Raum "TIM Testraum 1" ein
    Und        "D" erhält eine Einladung in Raum "TIM Testraum 1" von "C"
    Und        "D" bestätigt eine Einladung in Raum "TIM Testraum 1" von "C"
    Und        "C" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Und        "D" empfängt eine Nachricht "Testnachricht 1" von "C" im Raum "TIM Testraum 1"
    Wenn       "C" löscht seine Nachricht "Testnachricht 1" im Raum "TIM Testraum 1"
    Dann       "D" kann die Nachricht "Testnachricht 1" von "C" im Raum "TIM Testraum 1" nicht mehr sehen [Retry 10 - 3]
    Und        "C" kann die Nachricht "Testnachricht 1" von "C" im Raum "TIM Testraum 1" nicht mehr sehen [Retry 5 - 2]

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1B,homeserver,2)
  #@DistinctColumn(ApiName1B)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(ApiName2A.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
    @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2A.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName2A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2B.hasTag("client"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2B.hasTag("prefIOP"))

    Beispiele:
    | ApiName1A | ApiName2A | ApiName1B | ApiName2B |

  @BP:P2P @Ctl:Raum @Ctl:MsgForward @Ctl:MsgLogout @Ctl:BasicTest
  @TCID:TIM_11_AF_1014 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 10.14 Events außerhalb einer Organisation - Raum - HBA-User "A" sendet eine Nachricht an ausgeloggten "B"
    Angenommen Es werden folgende Clients reserviert:
      | A | PRACTITIONER | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "B" loggt sich im TI-Messenger aus
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet "B" in FHIR
    Und        "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Und        "A" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Wenn       "B" loggt sich im TI-Messenger ein
    Dann       "B" erhält eine Einladung in Raum "TIM Testraum 1" von "A"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1" von "A"
    Und        "B" empfängt eine Nachricht "Testnachricht 1" von "A" im Raum "TIM Testraum 1"

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("practitioner"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
      | ApiName1 | ApiName2 |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Raum @Ctl:MsgForward @Ctl:MsgLogout
  @TCID:TIM_11_AF_1015 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 10.15 Events außerhalb einer Organisation - Raum - Organisations-User "A" sendet eine Nachricht an ausgeloggten "B"
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN | <ApiName1A> |
      | B | ORG_ADMIN | <ApiName2A> |
      | C | CLIENT    | <ApiName1B> |
      | D | CLIENT    | <ApiName2B> |
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "C"
    Und        "B" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "D"
    Und        "D" loggt sich im TI-Messenger aus
    Und        "C" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "C" lädt "D" über den HealthcareService "HealthcareServiceName1" in den Chat-Raum "TIM Testraum 1" ein
    Und        "C" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Wenn       "D" loggt sich im TI-Messenger ein
    Dann       "D" erhält eine Einladung in Raum "TIM Testraum 1" von "C"
    Und        "D" bestätigt eine Einladung in Raum "TIM Testraum 1" von "C"
    Und        "D" empfängt eine Nachricht "Testnachricht 1" von "C" im Raum "TIM Testraum 1"

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2B,homeserver,2)
  #@DistinctColumn(ApiName2B)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(ApiName2A.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
    @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2A.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName2A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2B.hasTag("client"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2B.hasTag("prefIOP"))

    Beispiele:
    | ApiName1A | ApiName2A | ApiName1B | ApiName2B |

  @BP:P2P @Ctl:Raum @Ctl:MsgBackward @Ctl:Attachment @Ctl:BasicTest @AFO-ID:A_22723
  @TCID:TIM_11_AF_1016 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 10.16 Events außerhalb einer Organisation - Raum - HBA-User "B" sendet ein Attachment
    Angenommen Es werden folgende Clients reserviert:
      | A | PRACTITIONER | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet "B" in FHIR
    Und        "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Und        "B" erhält eine Einladung in Raum "TIM Testraum 1" von "A"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1" von "A"
    Wenn       "B" sendet ein Attachment "datei.txt" an den Raum "TIM Testraum 1"
    Dann       "A" empfängt das Attachment "datei.txt" von "B" im Raum "TIM Testraum 1"

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("practitioner"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1 | ApiName2 |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Raum @Ctl:MsgBackward @Ctl:Attachment @AFO-ID:A_22723
  @TCID:TIM_11_AF_1017 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 10.17 Events außerhalb einer Organisation - Raum - Organisations-User "D" sendet ein Attachment
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN | <ApiName1A> |
      | B | ORG_ADMIN | <ApiName2A> |
      | C | CLIENT    | <ApiName1B> |
      | D | CLIENT    | <ApiName2B> |
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "C"
    Und        "B" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "D"
    Und        "C" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "C" lädt "D" über den HealthcareService "HealthcareServiceName1" in den Chat-Raum "TIM Testraum 1" ein
    Und        "D" erhält eine Einladung in Raum "TIM Testraum 1" von "C"
    Und        "D" bestätigt eine Einladung in Raum "TIM Testraum 1" von "C"
    Wenn       "D" sendet ein Attachment "datei.txt" an den Raum "TIM Testraum 1"
    Dann       "C" empfängt das Attachment "datei.txt" von "D" im Raum "TIM Testraum 1"

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2B,homeserver,2)
  #@DistinctColumn(ApiName2B)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(ApiName2A.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
    @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2A.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName2A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2B.hasTag("client"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2B.hasTag("prefIOP"))

    Beispiele:
    | ApiName1A | ApiName2A | ApiName1B | ApiName2B |

  @BP:P2P @Ctl:Raum @Ctl:MsgForward @Ctl:Attachment @AFO-ID:A_22723
  @TCID:TIM_11_AF_1018 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 10.18 Events außerhalb einer Organisation - Raum - HBA-User "A" sendet ein Attachment
    Angenommen Es werden folgende Clients reserviert:
      | A | PRACTITIONER | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet "B" in FHIR
    Und        "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Und        "B" erhält eine Einladung in Raum "TIM Testraum 1" von "A"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1" von "A"
    Wenn       "A" sendet ein Attachment "bild.jpg" an den Raum "TIM Testraum 1"
    Dann       "B" empfängt das Attachment "bild.jpg" von "A" im Raum "TIM Testraum 1"

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("practitioner"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1 | ApiName2 |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Raum @Ctl:MsgForward @Ctl:Attachment @Ctl:BasicTest @AFO-ID:A_22723
  @TCID:TIM_11_AF_1019 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 10.19 Events außerhalb einer Organisation - Raum - Organisations-User "A" sendet ein Attachment
    Angenommen Es werden folgende Clients reserviert:
      | A | ORG_ADMIN | <ApiName1A> |
      | B | ORG_ADMIN | <ApiName2A> |
      | C | CLIENT    | <ApiName1B> |
      | D | CLIENT    | <ApiName2B> |
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "C"
    Und        "B" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "D"
    Und        "C" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "C" lädt "D" über den HealthcareService "HealthcareServiceName1" in den Chat-Raum "TIM Testraum 1" ein
    Und        "D" erhält eine Einladung in Raum "TIM Testraum 1" von "C"
    Und        "D" bestätigt eine Einladung in Raum "TIM Testraum 1" von "C"
    Wenn       "C" sendet ein Attachment "bild.jpg" an den Raum "TIM Testraum 1"
    Dann       "D" empfängt das Attachment "bild.jpg" von "C" im Raum "TIM Testraum 1"

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1B,homeserver,2)
  #@DistinctColumn(ApiName1B)
    @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
    @Filter(ApiName2A.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
    @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2A.properties["homeserver"]))
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1A.hasTag("orgAdmin"))
    @Filter(ApiName2A.hasTag("orgAdmin"))
    @Filter(ApiName1B.hasTag("client"))
    @Filter(ApiName2B.hasTag("client"))
    @SoftFilter(ApiName1B.hasTag("prefIOP"))
    @SoftFilter(ApiName2B.hasTag("prefIOP"))

    Beispiele:
    | ApiName1A | ApiName2A | ApiName1B | ApiName2B |

  @BP:P2P @Ctl:Chat @Ctl:MsgForward
  @TCID:TIM_11_AF_1020 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 10.20 Events außerhalb einer Organisation - Chat - User verlässt den Chat
    Angenommen Es werden folgende Clients reserviert:
      | A | PRACTITIONER | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" findet "B" in FHIR
    Wenn       "A" schreibt "B" direkt "Testnachricht 1"
    Und        "B" erhält eine Einladung von "A"
    Und        "B" bestätigt eine Einladung von "A"
    Dann       "B" empfängt eine Nachricht "Testnachricht 1" von "A"
    Wenn       "A" verlässt Chat mit "B"
    Dann       "B" bestätigt, dass "A" den Chat-Raum verlassen hat

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("practitioner"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1 | ApiName2 |

  @BP:P2P @Ctl:Raum @Ctl:MsgForward
  @TCID:TIM_11_AF_1021 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 10.21 Events außerhalb einer Organisation - Raum - User verlässt den Raum
    Angenommen Es werden folgende Clients reserviert:
      | A | PRACTITIONER | <ApiName1> |
      | B | PRACTITIONER | <ApiName2> |
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet "B" in FHIR
    Und        "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Und        "B" erhält eine Einladung in Raum "TIM Testraum 1" von "A"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1" von "A"
    Wenn       "B" sendet die Nachricht "Testnachricht 1" an den Raum "TIM Testraum 1"
    Dann       "A" empfängt eine Nachricht "Testnachricht 1" von "B" im Raum "TIM Testraum 1"
    Wenn       "B" verlässt Raum "TIM Testraum 1"
    Dann       "A" bestätigt, dass "B" den Raum "TIM Testraum 1" verlassen hat

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2,homeserver,2)
    @DistinctProperty(homeserver)
    @AllowSelfCombine(false)
    @AllowDoubleLineup(true)
    @Filter(ApiName1.hasTag("client"))
    @Filter(ApiName2.hasTag("client"))
    @Filter(ApiName1.hasTag("practitioner"))
    @Filter(ApiName2.hasTag("practitioner"))
    @SoftFilter(ApiName1.hasTag("prefIOP"))
    @SoftFilter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1 | ApiName2 |
