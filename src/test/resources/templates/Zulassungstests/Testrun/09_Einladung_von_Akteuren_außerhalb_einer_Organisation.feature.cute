# language: de
@File:FeatureFile_09 @Ctl:UseCase
@PRODUKT:TI-M
@AF-ID:AF_10061
@AK-ID:ML-123654 @AK-ID:ML-123663 @AK-ID:ML-122592
Funktionalität:  09. Einladung von Akteuren außerhalb einer Organisation
  AF_10061 - Einladung von Akteuren außerhalb einer Organisation
  In diesem Anwendungsfall wird ein Akteur außerhalb einer Organisation eingeladen. Für die Suche von
  Akteuren außerhalb der Organisation KANN das VZD-FHIR-Directory verwendet werden. Ist die MXID des
  gesuchten Akteurs dort nicht vorhanden MUSS die Kontaktaufnahme auch über einen QR-Code Scan erfolgen.
  Im Gegensatz zu einer Einladung von Akteuren innerhalb einer Organisation (siehe "AF_10063 - Austausch
  von Events innerhalb einer Organisation"), prüft in diesem Anwendungsfall der Messenger-Proxy des Einzuladenden
  zusätzlich die im Kapitel "Berechtigungskonzept" festgelegten Kriterien (Stufe 1 - 3).

  In diesem Anwendungsfall erfolgt gleichzeitig eine Prüfung des Berechtigungskonzept.

  Inhalt
  TF  1 -  4 Einladung in Chat/Raum (HBA an HBA)
  TF  5      Einladung in Chat (HBA an OrgUser)
  TF  6      Einladung in Raum (OrgUser an OrgUser)
  TF  7      Einladung in Chat (OrgUser an HBA) (Negativ)
  TF  8 &  9 Ablehnung der Einladung in Chat/Raum (HBA an HBA)
  TF 10 & 11 Ablehnung der Einladung in Chat/Raum (OrgUser an OrgUser)
  TF 12 & 13 Negativ-Tests zur Einladung - Dritter Nutzer soll in Chat eingeladen werden (HBA & OrgUser)
  TF 14 & 15 Negativ-Tests zur Einladung - Im Verzeichnisdienst nicht registrierter Nutzer wird gesucht (HBA & OrgUser)
  TF 16 & 17 Einladung durch nicht im Verzeichnisdienst registrierte User in Chat/Raum (HBA an HBA)
  TF 18 & 19 Einladung durch nicht im Verzeichnisdienst registrierte User in Chat/Raum (OrgUser und OrgUser)

  # TODO Bei mehreren Anbiertern MaxSameColumnProperty & Shuffle anschalten
  # TODO TF 14 & 15 Search HBA raus nehmen - Search prüfen (einmal suche im OrgaVZ und PratVZ & Lokal)

  @BP:P2P @Ctl:Chat
  @TCID:TIM_11_AF_901 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 09.1 Einladung außerhalb einer Organisation - Einladung in Chat - Volltextsuche (HBA-User an HBA-User)
    Angenommen "A" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1>
    Und        "B" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName2>
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" findet "B" in FHIR
    Wenn       "A" schreibt "B" direkt "Hello from the other site"
    Dann       "B" erhält eine Einladung von "A"
    Und        "B" bestätigt eine Einladung von "A"
    Und        "B" empfängt eine Nachricht "Hello from the other site" von "A"

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
  @DistinctProperty(homeserver)
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1.hasTag("client"))
  @Filter(ApiName2.hasTag("client"))
  @Filter(ApiName1.hasTag("practitioner"))
  @Filter(ApiName2.hasTag("practitioner"))
  @Filter(ApiName1.hasTag("prefIOP"))
  @Filter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1 | ApiName2 |

  @BP:P2P @Ctl:Chat @Ctl:SeachPart
  @TCID:TIM_11_AF_902 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 09.2 Einladung außerhalb einer Organisation - Einladung in Chat - unscharfe Suche (HBA-User an HBA-User)
    Angenommen "A" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1>
    Und        "B" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName2>
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" findet TI-Messenger-Nutzer "B" bei Suche nach Namen minus 0-1 (Anzahl vorne-hinten) Char(s) abgeschnitten
    Wenn       "A" schreibt "B" direkt "Hello from the other site"
    Dann       "B" erhält eine Einladung von "A"
    Und        "B" bestätigt eine Einladung von "A"
    Und        "B" empfängt eine Nachricht "Hello from the other site" von "A"

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
  @DistinctProperty(homeserver)
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1.hasTag("client"))
  @Filter(ApiName2.hasTag("client"))
  @Filter(ApiName1.hasTag("practitioner"))
  @Filter(ApiName2.hasTag("practitioner"))
  @Filter(ApiName1.hasTag("prefIOP"))
  @Filter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1 | ApiName2 |

  @BP:P2P @Ctl:Raum
  @TCID:TIM_11_AF_903 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 09.3 Einladung außerhalb einer Organisation - Einladung in Raum - Volltextsuche (HBA-User an HBA-User)
    Angenommen "A" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1>
    Und        "B" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName2>
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet "B" in FHIR
    Wenn       "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Dann       "B" erhält eine Einladung von "A"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1"
    Und        "B" ist dem Raum "TIM Testraum 1" beigetreten

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
  @DistinctProperty(homeserver)
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1.hasTag("client"))
  @Filter(ApiName2.hasTag("client"))
  @Filter(ApiName1.hasTag("practitioner"))
  @Filter(ApiName2.hasTag("practitioner"))
  @Filter(ApiName1.hasTag("prefIOP"))
  @Filter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1 | ApiName2 |

  @BP:P2P @Ctl:Raum @Ctl:SeachPart
  @TCID:TIM_11_AF_904 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 09.4 Einladung außerhalb einer Organisation - Einladung in Raum - unscharfe Suche (HBA-User an HBA-User)
    Angenommen "A" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1>
    Und        "B" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName2>
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet TI-Messenger-Nutzer "B" bei Suche nach Namen minus 0-1 (Anzahl vorne-hinten) Char(s) abgeschnitten
    Wenn       "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Dann       "B" erhält eine Einladung von "A"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1"
    Und        "B" ist dem Raum "TIM Testraum 1" beigetreten

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
  @DistinctProperty(homeserver)
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1.hasTag("client"))
  @Filter(ApiName2.hasTag("client"))
  @Filter(ApiName1.hasTag("practitioner"))
  @Filter(ApiName2.hasTag("practitioner"))
  @Filter(ApiName1.hasTag("prefIOP"))
  @Filter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1 | ApiName2 |

  @BP:P2O @Ctl:OrgAdmin @Ctl:Chat
  @TCID:TIM_11_AF_905 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 09.5 Einladung außerhalb einer Organisation - Einladung in Chat - HBA-User lädt Organisations-User ein
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "C" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName2>
    Wenn       "C" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "B"
    Und        "C" findet "B" im Healthcare-Service "HealthcareServiceName"
    Und        "C" schreibt "B" direkt "Hello from the other site"
    Und        "B" erhält eine Einladung von "C"
    Und        "B" bestätigt eine Einladung von "C"
    Dann       "B" empfängt eine Nachricht "Hello from the other site" von "C"

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1B,homeserver,2)
  @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
  @Filter(!ApiName1B.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName2.hasTag("client"))
  @Filter(ApiName2.hasTag("practitioner"))
  @Filter(ApiName1B.hasTag("prefIOP"))
  @Filter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName2 |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Raum
  @TCID:TIM_11_AF_906 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 09.6 Einladung außerhalb einer Organisation - Einladung in Raum - Organisations-User lädt Organisations-User ein
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "C" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName2A>
    Und        "D" reserviert sich einen Messenger-Client an Schnittstelle <ApiName2B>
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "C" erstellt einen Healthcare-Service "HealthcareServiceName2" und setzen einen Endpunkt auf "D"
    Und        "D" erstellt einen Chat-Raum "TIM Testraum 1"
    Wenn       "D" lädt "B" über den HealthcareService "HealthcareServiceName1" in den Chat-Raum "TIM Testraum 1" ein
    Dann       "B" erhält eine Einladung von "D"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1"
    Und        "B" ist dem Raum "TIM Testraum 1" beigetreten

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1B,homeserver,2)
  @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
  @Filter(ApiName2A.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
  @Filter(!ApiName1B.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName2A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName2B.hasTag("client"))
  @Filter(ApiName1B.hasTag("prefIOP"))
  @Filter(ApiName2B.hasTag("prefIOP"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName2A | ApiName2B |

  @BP:O2P_extern @Ctl:OrgAdmin @Ctl:Chat
  @TCID:TIM_11_AF_907 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.7 Einladung außerhalb einer Organisation - Einladung in Chat - Organisations-User lädt HBA-User ein
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "C" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName2>
    Wenn       "C" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "B"
    Und        "B" findet "C" in FHIR
    Und        "B" versucht "C" direkt "Hello from the other site" zu schreiben
    Dann       erhält "B" einen Responsecode 403

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1B,homeserver,2)
  @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
  @Filter(!ApiName1B.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName2.hasTag("client"))
  @Filter(ApiName2.hasTag("practitioner"))
  @Filter(ApiName1B.hasTag("prefIOP"))
  @Filter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName2 |

  @BP:P2P @Ctl:Chat @Ctl:InvitReject
  @TCID:TIM_11_AF_908 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 09.8 Einladung außerhalb einer Organisation - Einladung in Chat - Ablehnung der Einladung (HBA-User an HBA-User)
    Angenommen "A" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1>
    Und        "B" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName2>
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" findet "B" in FHIR
    Und        "A" schreibt "B" direkt "Hello from the other site"
    Und        "B" erhält eine Einladung von "A"
    Wenn       "B" lehnt eine Einladung zum Chat mit "A" ab
    Dann       "B" ist dem Chat mit "A" nicht beigetreten

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2,homeserver,2)
  @DistinctProperty(homeserver)
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1.hasTag("client"))
  @Filter(ApiName2.hasTag("client"))
  @Filter(ApiName1.hasTag("practitioner"))
  @Filter(ApiName2.hasTag("practitioner"))
  @Filter(ApiName1.hasTag("prefIOP"))
  @Filter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1 | ApiName2 |

  @BP:P2P @Ctl:Raum @Ctl:InvitReject
  @TCID:TIM_11_AF_909 @PRIO:2 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 09.9 Einladung außerhalb einer Organisation - Einladung in Raum - Ablehnung der Einladung (HBA-User an HBA-User)
    Angenommen "A" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1>
    Und        "B" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName2>
    Und        "A", "B" hinterlegt seine MXID im Verzeichnis Dienst
    Und        "A" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "A" findet "B" in FHIR
    Und        "A" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Und        "B" erhält eine Einladung in Raum "TIM Testraum 1"
    Wenn       "B" lehnt eine Einladung für Raum "TIM Testraum 1" ab
    Dann       "B" ist dem Raum "TIM Testraum 1" nicht beigetreten

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2,homeserver,2)
  @DistinctProperty(homeserver)
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1.hasTag("client"))
  @Filter(ApiName2.hasTag("client"))
  @Filter(ApiName1.hasTag("practitioner"))
  @Filter(ApiName2.hasTag("practitioner"))
  @Filter(ApiName1.hasTag("prefIOP"))
  @Filter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1 | ApiName2 |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Chat @Ctl:InvitReject
  @TCID:TIM_11_AF_910 @PRIO:2 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.10 Einladung außerhalb einer Organisation - Einladung in Chat - Ablehnung der Einladung (Organisations-User an Organisations-User)
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName2A>
    Und        "C" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "D" reserviert sich einen Messenger-Client an Schnittstelle <ApiName2B>
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "C"
    Und        "B" erstellt einen Healthcare-Service "HealthcareServiceName2" und setzen einen Endpunkt auf "D"
    Und        "C" schreibt "D" über den Healthcare-Service "HealthcareServiceName2" direkt "Hello from the other site"
    Und        "D" erhält eine Einladung von "C"
    Wenn       "D" lehnt eine Einladung zum Chat mit "C" ab
    Dann       "D" ist dem Chat mit "C" nicht beigetreten

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2B,homeserver,2)
  @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
  @Filter(ApiName2A.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
  @Filter(!ApiName1B.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName2A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName2B.hasTag("client"))
  @Filter(ApiName1B.hasTag("prefIOP"))
  @Filter(ApiName2B.hasTag("prefIOP"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName2A | ApiName2B |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Raum @Ctl:InvitReject
  @TCID:TIM_11_AF_911 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.11 Einladung außerhalb einer Organisation - Einladung in Raum - Ablehnung der Einladung (Organisations-User an Organisations-User)
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName2A>
    Und        "C" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "D" reserviert sich einen Messenger-Client an Schnittstelle <ApiName2B>
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "C"
    Und        "B" erstellt einen Healthcare-Service "HealthcareServiceName2" und setzen einen Endpunkt auf "D"
    Und        "C" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "C" lädt "D" über den HealthcareService "HealthcareServiceName2" in den Chat-Raum "TIM Testraum 1" ein
    Und        "D" erhält eine Einladung in Raum "TIM Testraum 1"
    Wenn       "D" lehnt eine Einladung für Raum "TIM Testraum 1" ab
    Dann       "D" ist dem Raum "TIM Testraum 1" nicht beigetreten

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2B,homeserver,2)
  @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
  @Filter(ApiName2A.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
  @Filter(!ApiName1B.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName2A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName2B.hasTag("client"))
  @Filter(ApiName1B.hasTag("prefIOP"))
  @Filter(ApiName2B.hasTag("prefIOP"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName2A | ApiName2B |

  @BP:P2P @Ctl:Chat @Ctl:RejectThird
  @TCID:TIM_11_AF_912 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.12 Einladung außerhalb einer Organisation - Einladung in Chat - Dritter Nutzer soll in Chat eingeladen werden (HBA)
    Angenommen "A" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1B>
    Und        "C" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName2>
    Und        "A", "B", "C" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "A" findet "B" in FHIR
    Und        "A" schreibt "B" direkt "Hello from the other site"
    Und        "B" erhält eine Einladung von "A"
    Und        "B" bestätigt eine Einladung von "A"
    Und        "B" empfängt eine Nachricht "Hello from the other site" von "A"
    Wenn       "A" lädt "C" in Chat mit "B" ein
    Dann       erhält "A" einen Responsecode 401

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1A,homeserver,2)
  @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
  @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
  @DistinctColumn(ApiName1A)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("client"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName2.hasTag("client"))
  @Filter(ApiName1A.hasTag("practitioner"))
  @Filter(ApiName1B.hasTag("practitioner"))
  @Filter(ApiName2.hasTag("practitioner"))
  @Filter(ApiName1A.hasTag("prefIOP"))
  @Filter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName2 |

  @BP:O2O @Ctl:OrgAdmin @Ctl:Chat @Ctl:RejectThird
  @TCID:TIM_11_AF_913 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.13 Einladung außerhalb einer Organisation - Einladung in Chat - Dritter Nutzer soll in Chat eingeladen werden (OrgUser)
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName2A>
    Und        "C" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "D" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1C>
    Und        "E" reserviert sich einen Messenger-Client an Schnittstelle <ApiName2B>
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "C"
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "D"
    Und        "B" erstellt einen Healthcare-Service "HealthcareServiceName2" und setzen einen Endpunkt auf "E"
    Und        "C" findet "D" im Healthcare-Service "HealthcareServiceName1"
    Und        "C" schreibt "D" direkt "Hello from the other site"
    Und        "D" erhält eine Einladung von "C"
    Und        "D" bestätigt eine Einladung von "C"
    Und        "D" empfängt eine Nachricht "Hello from the other site" von "C"
    Wenn       "C" lädt "E" in Chat mit "D" ein
    Dann       erhält "C" einen Responsecode 401

  @Shuffle(true)
  #@MaxSameColumnProperty(ApiName1B,homeserver,2)
  @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
  @Filter(ApiName1B.properties["homeserver"].equals(ApiName1C.properties["homeserver"]))
  @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2A.properties["homeserver"]))
  @Filter(ApiName2A.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
  @DistinctColumn(ApiName1B)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1C.hasTag("client"))
  @Filter(ApiName2A.hasTag("orgAdmin"))
  @Filter(ApiName2B.hasTag("client"))

    Beispiele:
    | ApiName1A | ApiName2A | ApiName1B | ApiName1C | ApiName2B |

  @BP:P2N_extern
  @TCID:TIM_11_AF_914 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.14 Einladung außerhalb einer Organisation - Im Verzeichnisdienst nicht registrierter Nutzer wird gesucht durch HBA-User
    Angenommen "A" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1>
    Und        "B" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName2>
    Und        "A" hinterlegt seine MXID im Verzeichnis Dienst
    Dann       "A" findet TI-Messenger-Nutzer "B" bei Suche mit Namen "HBA_B" NICHT

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName1,homeserver,2)
  @DistinctProperty(homeserver)
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1.hasTag("client"))
  @Filter(ApiName2.hasTag("client"))
  @Filter(ApiName1.hasTag("practitioner"))
  @Filter(ApiName2.hasTag("practitioner"))
  @Filter(ApiName1.hasTag("prefIOP"))
  @Filter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1 | ApiName2 |

  @BP:O2N_extern @Ctl:OrgAdmin
  @TCID:TIM_11_AF_915 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.15 Einladung außerhalb einer Organisation - Im Verzeichnisdienst nicht registrierter Nutzer wird gesucht durch Organisations-User
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "C" reserviert sich einen Messenger-Client an Schnittstelle <ApiName2>
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "B"
    Dann       "B" findet TI-Messenger-Nutzer "C" bei Suche mit Namen "HBA_B" NICHT

  @Shuffle(true)
  #@MaxSameColumnProperty(ApiName1B,homeserver,2)
  @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
  @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
  @DistinctColumn(ApiName1B)
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName2.hasTag("client"))
  @Filter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName2 |

  @BP:N2P_extern @Ctl:Chat
  @TCID:TIM_11_AF_916 @PRIO:1 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.16 Einladung außerhalb einer Organisation - Einladung in Chat - HBA-User ohne Eintrag im Verzeichnisdienst versucht HBA-User einzuladen
    Angenommen "A" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName1>
    Und        "B" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName2>
    Und        "A" hinterlegt seine MXID im Verzeichnis Dienst
    Wenn       "B" schreibt "A" direkt "Hello from the other site"
    Dann       erhält "B" einen Responsecode 403

  #@Shuffle(true)
  #@MaxSameColumnProperty(ApiName2,homeserver,2)
  @DistinctProperty(homeserver)
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @DistinctColumn(ApiName2)
  @Filter(ApiName1.hasTag("client"))
  @Filter(ApiName2.hasTag("client"))
  @Filter(ApiName1.hasTag("practitioner"))
  @Filter(ApiName2.hasTag("practitioner"))
  #@Filter(ApiName1.hasTag("prefIOP"))
  #@Filter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1 | ApiName2 |

  @BP:N2O @Ctl:OrgAdmin @Ctl:Raum
  @TCID:TIM_11_AF_917 @PRIO:2 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 09.17 Einladung außerhalb einer Organisation - Einladung in Raum - HBA-User ohne Eintrag im Verzeichnisdienst versucht Organisations-User einzuladen
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "C" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName2>
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "C" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "C" findet "B" im Healthcare-Service "HealthcareServiceName1"
    Wenn       "C" lädt "B" in Chat-Raum "TIM Testraum 1" ein
    Dann       "B" erhält eine Einladung von "C"
    Und        "B" bestätigt eine Einladung in Raum "TIM Testraum 1"
    Und        "B" ist dem Raum "TIM Testraum 1" beigetreten

  @Shuffle(true)
  #@MaxSameColumnProperty(ApiName2,homeserver,2)
  @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
  @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
  #@DistinctColumn(ApiName2)
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName2.hasTag("client"))
  @Filter(ApiName2.hasTag("practitioner"))
  @Filter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName2 |

  @BP:N2P_extern @Ctl:OrgAdmin @Ctl:Chat
  @TCID:TIM_11_AF_918 @PRIO:2 @TESTFALL:Negativ @STATUS:Implementiert
  Szenariogrundriss: 09.18 Einladung außerhalb einer Organisation - Einladung in Chat - Organisations-User ohne Eintrag im Verzeichnisdienst versucht HBA-User einzuladen
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Practitioner-Client an Schnittstelle <ApiName2>
    Und        "C" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "B" hinterlegt seine MXID im Verzeichnis Dienst
    Wenn       "C" schreibt "B" direkt "Hello from the other site"
    Dann       erhält "C" einen Responsecode 403

  @Shuffle(true)
  #@MaxSameColumnProperty(ApiName1B,homeserver,2)
  @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
  @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @DistinctColumn(ApiName1B)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName2.hasTag("client"))
  @Filter(ApiName2.hasTag("practitioner"))
  @Filter(ApiName2.hasTag("prefIOP"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName2 |

  @BP:N2O @Ctl:OrgAdmin @Ctl:Raum
  @TCID:TIM_11_AF_919 @PRIO:1 @TESTFALL:Positiv @STATUS:Implementiert
  Szenariogrundriss: 09.19 Einladung außerhalb einer Organisation - Einladung in Raum - Organisations-User ohne Eintrag im Verzeichnisdienst versucht Organisations-User einzuladen
    Angenommen "A" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Org-Admin-Client an Schnittstelle <ApiName2A>
    Und        "C" reserviert sich einen Messenger-Client an Schnittstelle <ApiName1B>
    Und        "D" reserviert sich einen Messenger-Client an Schnittstelle <ApiName2B>
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName" und setzen einen Endpunkt auf "C"
    Und        "B" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "D"
    Und        "D" erstellt einen Chat-Raum "TIM Testraum 1"
    Und        "D" findet "C" im Healthcare-Service "HealthcareServiceName"
    Wenn       "D" lädt "C" in Chat-Raum "TIM Testraum 1" ein
    Dann       "C" erhält eine Einladung von "D"
    Und        "C" bestätigt eine Einladung in Raum "TIM Testraum 1"
    Und        "C" ist dem Raum "TIM Testraum 1" beigetreten

  @Shuffle(true)
  #@MaxSameColumnProperty(ApiName2B,homeserver,2)
  @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
  @Filter(ApiName2A.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
  @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2A.properties["homeserver"]))
  @DistinctColumn(ApiName2B)
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName2A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName2B.hasTag("client"))

    Beispiele:
    | ApiName1A | ApiName2A | ApiName1B | ApiName2B |
