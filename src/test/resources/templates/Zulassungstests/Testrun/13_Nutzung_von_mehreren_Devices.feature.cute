# language: de
@File:FeatureFile_13 @Ctl:UseCase @Ctl:Additional @Ctl:MultiDevices
@Anwendungsfall:AF_MultiDevices
Funktionalität: 13. Nutzung von mehreren Geräten
  Die folgenden Testfälle sollen die Funktionalität der Nutzung von mehreren Devices mit einem Account sicher stellen,
  die nicht weiter in der Spezifikationen des TI-Messengers beschrieben sind, aber trotzdem für den Betrieb des
  TI-Messenger-Dienst wichtig sind.

  Inhalt
  TF 1 & 2 Nutzung mehrerer Devices - zwischen 2 Organisationen (HBA & OrgUser)
  TF 3 & 4 Nutzung mehrerer Devices - zwischen 2 Organisationen - Erhalt vorheriger Nachrichten (HBA & OrgUser)
  TF 5 & 6 Nutzung mehrerer Devices - innerhalb einer Organisation (HBA & OrgUser)
  TF 7 & 8 Nutzung mehrerer Devices - innerhalb einer Organisation - Erhalt vorheriger Nachrichten (HBA & OrgUser)

  @Ctl:BP_P2P
  @TCID:TIM_11_AF_1301 @PRIO:1 @Testfall:Positiv @Status:Implementiert
  Szenariogrundriss: 13.1 Events außerhalb einer Organisation - Chat - Test-Client "A" mit 2 Devices
    Angenommen "A" reserviert sich einen Test-Client an der Schnittstelle <ApiName1A> mit dem Benutzer "HBA_A"
    Und        "B" meldet sich mit den Daten von "A" an der Schnittstelle <ApiName1B> an
    Und        "C" reserviert sich einen Test-Client an der Schnittstelle <ApiName2> mit dem Benutzer "HBA_B"
    Und        "A", "C" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "C" findet "A" in FHIR
    Wenn       "C" schreibt "A" direkt "Hello from the other site"
    Und        "A" erhält eine Einladung von "C"
    Und        "B" erhält eine Einladung von "C"
    Und        "A" bestätigt eine Einladung von "C"
    Und        "A" empfängt eine Nachricht "Hello from the other site" von "C"
    Und        "A" loggt sich im TI-Messenger aus
    Dann       "B" empfängt eine Nachricht "Hello from the other site" von "C"
    Und        "B" schreibt "C" direkt "At least I can say that I have tried"
    Und        "C" empfängt eine Nachricht "At least I can say that I have tried" von "B"

  @Shuffle(true)
  @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
  @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
  @Filter(!ApiName1A.properties["os"].equals(ApiName1B.properties["os"]))
  @Filter(!ApiName1B.properties["os"].equals(ApiName2.properties["os"]))
  @DistinctColumn(ApiName1B)
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("client"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName2.hasTag("client"))
  @Filter(ApiName1A.hasTag("practitioner"))
  @Filter(ApiName2.hasTag("practitioner"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName2 |

  @Ctl:BP_O2O @Ctl:OrgAdmin
  @TCID:TIM_11_AF_1302 @PRIO:1 @Testfall:Positiv @Status:Implementiert
  Szenariogrundriss: 13.2 Events außerhalb einer Organisation - Chat - Test-Client "A" mit 2 Devices
    Angenommen "A" reserviert sich einen Org Admin Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Org Admin Client an Schnittstelle <ApiName2A>
    Und        "C" reserviert sich einen Test-Client an der Schnittstelle <ApiName1B> mit dem Benutzer "OrgUser_A"
    Und        "D" meldet sich mit den Daten von "C" an der Schnittstelle <ApiName1C> an
    Und        "E" reserviert sich einen Test-Client an der Schnittstelle <ApiName2B> mit dem Benutzer "OrgUser_B"
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "C"
    Und        "B" erstellt einen Healthcare-Service "HealthcareServiceName2" und setzen einen Endpunkt auf "E"
    Und        "E" findet "C" im Healthcare-Service "HealthcareServiceName1"
    Wenn       "E" schreibt "C" direkt "Hello from the other site"
    Und        "C" erhält eine Einladung von "E"
    Und        "D" erhält eine Einladung von "E"
    Und        "C" bestätigt eine Einladung von "E"
    Und        "C" empfängt eine Nachricht "Hello from the other site" von "E"
    Und        "C" loggt sich im TI-Messenger aus
    Dann       "D" empfängt eine Nachricht "Hello from the other site" von "E"
    Und        "D" schreibt "E" direkt "At least I can say that I have tried"
    Und        "E" empfängt eine Nachricht "At least I can say that I have tried" von "D"

  @Shuffle(true)
  @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
  @Filter(ApiName1A.properties["homeserver"].equals(ApiName1C.properties["homeserver"]))
  @Filter(ApiName2A.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
  @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2A.properties["homeserver"]))
  @Filter(!ApiName1B.properties["os"].equals(ApiName1C.properties["os"]))
  @Filter(!ApiName1C.properties["os"].equals(ApiName2B.properties["os"]))
  @DistinctColumn(ApiName1C)
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName2A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1C.hasTag("client"))
  @Filter(ApiName2B.hasTag("client"))

    Beispiele:
    | ApiName1A | ApiName2A | ApiName1B | ApiName1C | ApiName2B |

  @Ctl:BP_P2P
  @TCID:TIM_11_AF_1303 @PRIO:1 @Testfall:Positiv @Status:Implementiert
  Szenariogrundriss: 13.3 Events außerhalb einer Organisation - Chat - Test-Client "A" mit 2 Devices - Erhalt vorheriger Nachrichten
    Angenommen "A" reserviert sich einen Test-Client an der Schnittstelle <ApiName1A> mit dem Benutzer "HBA_A"
    Und        "B" reserviert sich einen Test-Client an der Schnittstelle <ApiName2> mit dem Benutzer "HBA_B"
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "B" findet "A" in FHIR
    Wenn       "B" schreibt "A" direkt "Hello from the other site"
    Und        "A" erhält eine Einladung von "B"
    Und        "A" bestätigt eine Einladung von "B"
    Und        "A" empfängt eine Nachricht "Hello from the other site" von "B"
    Und        "A" schreibt "B" direkt "At least I can say that I have tried"
    Und        "C" meldet sich mit den Daten von "A" an der Schnittstelle <ApiName1B> an
    Und        "A" loggt sich im TI-Messenger aus
    Dann       "C" empfängt eine Nachricht "Hello from the other site" von "B"
    Und        "C" empfängt eine Nachricht "At least I can say that I have tried" von "A"

  @Shuffle(true)
  @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
  @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2.properties["homeserver"]))
  @Filter(!ApiName1A.properties["os"].equals(ApiName1B.properties["os"]))
  @Filter(!ApiName1B.properties["os"].equals(ApiName2.properties["os"]))
  @DistinctColumn(ApiName1B)
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("client"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName2.hasTag("client"))
  @Filter(ApiName1A.hasTag("practitioner"))
  @Filter(ApiName2.hasTag("practitioner"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName2 |

  @Ctl:BP_O2O @Ctl:OrgAdmin
  @TCID:TIM_11_AF_1304 @PRIO:1 @Testfall:Positiv @Status:Implementiert
  Szenariogrundriss: 13.4 Events außerhalb einer Organisation - Chat - Test-Client "A" mit 2 Devices - Erhalt vorheriger Nachrichten
    Angenommen "A" reserviert sich einen Org Admin Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Org Admin Client an Schnittstelle <ApiName2A>
    Und        "C" reserviert sich einen Test-Client an der Schnittstelle <ApiName1B> mit dem Benutzer "OrgUser_A"
    Und        "D" reserviert sich einen Test-Client an der Schnittstelle <ApiName2B> mit dem Benutzer "OrgUser_B"
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "C"
    Und        "B" erstellt einen Healthcare-Service "HealthcareServiceName2" und setzen einen Endpunkt auf "D"
    Und        "D" findet "C" im Healthcare-Service "HealthcareServiceName1"
    Wenn       "D" schreibt "C" direkt "Hello from the other site"
    Und        "C" erhält eine Einladung von "D"
    Und        "C" bestätigt eine Einladung von "D"
    Und        "C" empfängt eine Nachricht "Hello from the other site" von "D"
    Und        "C" schreibt "D" direkt "At least I can say that I have tried"
    Und        "E" meldet sich mit den Daten von "C" an der Schnittstelle <ApiName1C> an
    Und        "C" loggt sich im TI-Messenger aus
    Dann       "E" empfängt eine Nachricht "Hello from the other site" von "D"
    Und        "E" empfängt eine Nachricht "At least I can say that I have tried" von "C"

  @Shuffle(true)
  @Filter(ApiName1A.properties["homeserver"].equals(ApiName1B.properties["homeserver"]))
  @Filter(ApiName1A.properties["homeserver"].equals(ApiName1C.properties["homeserver"]))
  @Filter(ApiName2A.properties["homeserver"].equals(ApiName2B.properties["homeserver"]))
  @Filter(!ApiName1A.properties["homeserver"].equals(ApiName2A.properties["homeserver"]))
  @Filter(!ApiName1B.properties["os"].equals(ApiName1C.properties["os"]))
  @Filter(!ApiName1C.properties["os"].equals(ApiName2B.properties["os"]))
  @DistinctColumn(ApiName1C)
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName2A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1C.hasTag("client"))
  @Filter(ApiName2B.hasTag("client"))

    Beispiele:
    | ApiName1A | ApiName2A | ApiName1B | ApiName1C | ApiName2B |

  @Ctl:BP_P2P @Ctl:OneHomeServer
  @TCID:TIM_11_AF_1305 @PRIO:1 @Testfall:Positiv @Status:Implementiert
  Szenariogrundriss: 13.5 Events innerhalb einer Organisation - Chat - Test-Client "A" mit 2 Devices
    Angenommen "A" reserviert sich einen Test-Client an der Schnittstelle <ApiName1A> mit dem Benutzer "HBA_A"
    Und        "B" meldet sich mit den Daten von "A" an der Schnittstelle <ApiName1B> an
    Und        "C" reserviert sich einen Test-Client an der Schnittstelle <ApiName1C> mit dem Benutzer "HBA_B"
    Und        "A", "C" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "C" findet "A" in FHIR
    Wenn       "C" schreibt "A" direkt "Hello from the other site"
    Und        "A" erhält eine Einladung von "C"
    Und        "B" erhält eine Einladung von "C"
    Und        "A" bestätigt eine Einladung von "C"
    Und        "A" empfängt eine Nachricht "Hello from the other site" von "C"
    Und        "A" loggt sich im TI-Messenger aus
    Dann       "B" empfängt eine Nachricht "Hello from the other site" von "C"
    Und        "B" schreibt "C" direkt "At least I can say that I have tried"
    Und        "C" empfängt eine Nachricht "At least I can say that I have tried" von "B"

  @Shuffle(true)
  @EqualProperty(homeserver)
  @Filter(!ApiName1A.properties["os"].equals(ApiName1B.properties["os"]))
  @DistinctColumn(ApiName1B)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("client"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1C.hasTag("client"))
  @Filter(ApiName1A.hasTag("practitioner"))
  @Filter(ApiName1C.hasTag("practitioner"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName1C |

  @Ctl:BP_O2O @Ctl:OneHomeServer @Ctl:OrgAdmin
  @TCID:TIM_11_AF_1306 @PRIO:1 @Testfall:Positiv @Status:Implementiert
  Szenariogrundriss: 13.6 Events innerhalb einer Organisation - Chat - Test-Client "A" mit 2 Devices
    Angenommen "A" reserviert sich einen Org Admin Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Test-Client an der Schnittstelle <ApiName1B> mit dem Benutzer "OrgUser_A"
    Und        "C" meldet sich mit den Daten von "B" an der Schnittstelle <ApiName1C> an
    Und        "D" reserviert sich einen Test-Client an der Schnittstelle <ApiName1D> mit dem Benutzer "OrgUser_B"
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName2" und setzen einen Endpunkt auf "D"
    Und        "D" findet "B" im Healthcare-Service "HealthcareServiceName1"
    Wenn       "D" schreibt "B" direkt "Hello from the other site"
    Und        "B" erhält eine Einladung von "D"
    Und        "C" erhält eine Einladung von "D"
    Und        "B" bestätigt eine Einladung von "D"
    Und        "B" empfängt eine Nachricht "Hello from the other site" von "D"
    Und        "B" loggt sich im TI-Messenger aus
    Dann       "C" empfängt eine Nachricht "Hello from the other site" von "D"
    Und        "C" schreibt "D" direkt "At least I can say that I have tried"
    Und        "D" empfängt eine Nachricht "At least I can say that I have tried" von "C"

  @Shuffle(true)
  @EqualProperty(homeserver)
  @Filter(!ApiName1B.properties["os"].equals(ApiName1C.properties["os"]))
  @DistinctColumn(ApiName1C)
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1C.hasTag("client"))
  @Filter(ApiName1D.hasTag("client"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName1C | ApiName1D |

  @Ctl:BP_P2P
  @TCID:TIM_11_AF_1307 @PRIO:1 @Testfall:Positiv @Status:Implementiert
  Szenariogrundriss: 13.7 Events innerhalb einer Organisation - Chat - Test-Client "A" mit 2 Devices - Erhalt vorheriger Nachrichten
    Angenommen "A" reserviert sich einen Test-Client an der Schnittstelle <ApiName1A> mit dem Benutzer "HBA_A"
    Und        "B" reserviert sich einen Test-Client an der Schnittstelle <ApiName1B> mit dem Benutzer "HBA_B"
    Und        "A", "B" hinterlegen ihre MXIDs im Verzeichnis Dienst
    Und        "B" findet "A" in FHIR
    Wenn       "B" schreibt "A" direkt "Hello from the other site"
    Und        "A" erhält eine Einladung von "B"
    Und        "A" bestätigt eine Einladung von "B"
    Und        "A" empfängt eine Nachricht "Hello from the other site" von "B"
    Und        "A" schreibt "B" direkt "At least I can say that I have tried"
    Und        "C" meldet sich mit den Daten von "A" an der Schnittstelle <ApiName1C> an
    Und        "A" loggt sich im TI-Messenger aus
    Dann       "C" empfängt eine Nachricht "Hello from the other site" von "B"
    Und        "C" empfängt eine Nachricht "At least I can say that I have tried" von "A"

  @Shuffle(true)
  @EqualProperty(homeserver)
  @Filter(!ApiName1B.properties["os"].equals(ApiName1C.properties["os"]))
  @DistinctColumn(ApiName1C)
  @AllowSelfCombine(true)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("client"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1C.hasTag("client"))
  @Filter(ApiName1A.hasTag("practitioner"))
  @Filter(ApiName1B.hasTag("practitioner"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName1C |

  @Ctl:BP_O2O @Ctl:OrgAdmin
  @TCID:TIM_11_AF_1308 @PRIO:1 @Testfall:Positiv @Status:Implementiert
  Szenariogrundriss: 13.8 Events innerhalb einer Organisation - Chat - Test-Client "A" mit 2 Devices - Erhalt vorheriger Nachrichten
    Angenommen "A" reserviert sich einen Org Admin Client an Schnittstelle <ApiName1A>
    Und        "B" reserviert sich einen Test-Client an der Schnittstelle <ApiName1B> mit dem Benutzer "OrgUser_A"
    Und        "C" reserviert sich einen Test-Client an der Schnittstelle <ApiName1C> mit dem Benutzer "OrgUser_B"
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName1" und setzen einen Endpunkt auf "B"
    Und        "A" erstellt einen Healthcare-Service "HealthcareServiceName2" und setzen einen Endpunkt auf "C"
    Und        "C" findet "B" im Healthcare-Service "HealthcareServiceName1"
    Wenn       "C" schreibt "B" direkt "Hello from the other site"
    Und        "B" erhält eine Einladung von "C"
    Und        "B" bestätigt eine Einladung von "C"
    Und        "B" empfängt eine Nachricht "Hello from the other site" von "C"
    Und        "B" schreibt "C" direkt "At least I can say that I have tried"
    Und        "D" meldet sich mit den Daten von "B" an der Schnittstelle <ApiName1D> an
    Und        "B" loggt sich im TI-Messenger aus
    Dann       "D" empfängt eine Nachricht "Hello from the other site" von "C"
    Und        "D" empfängt eine Nachricht "At least I can say that I have tried" von "B"

  @Shuffle(true)
  @EqualProperty(homeserver)
  @Filter(!ApiName1B.properties["os"].equals(ApiName1D.properties["os"]))
  @DistinctColumn(ApiName1D)
  @AllowSelfCombine(false)
  @AllowDoubleLineup(true)
  @Filter(ApiName1A.hasTag("orgAdmin"))
  @Filter(ApiName1B.hasTag("client"))
  @Filter(ApiName1C.hasTag("client"))
  @Filter(ApiName1D.hasTag("client"))

    Beispiele:
    | ApiName1A | ApiName1B | ApiName1C | ApiName1D |